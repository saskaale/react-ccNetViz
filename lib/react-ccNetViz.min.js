!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define("react-ccNetViz",["react"],e):"object"==typeof exports?exports["react-ccNetViz"]=e(require("react")):t["react-ccNetViz"]=e(t.React)}("undefined"!=typeof self?self:this,function(t){return function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var i=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(t,r):{};i.get||i.set?Object.defineProperty(e,r,i):e[r]=t[r]}return e.default=t,e}(r(1)),n=o(r(2)),s=o(r(5));function o(t){return t&&t.__esModule?t:{default:t}}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function u(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function h(t,e){return!e||"object"!==a(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function c(t,e){return(c=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var f=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=h(this,(e.__proto__||Object.getPrototypeOf(e)).call(this))).canvasEl=(0,i.createRef)(),t}var r,n,o;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&c(t,e)}(e,i.default.Component),r=e,(n=[{key:"draw",value:function(){this.ccNetViz.draw()}},{key:"reset",value:function(){var t=this.props,e=t.nodes,r=t.edges,i=t.layout;this.ccNetViz.set(e,r,i)}},{key:"init",value:function(){this.ccNetViz&&this.ccNetViz.remove(),this.ccNetViz=new s.default(this.canvasEl.current,this.props.options)}},{key:"shouldComponentUpdate",value:function(t){var e=this,r=function(r){return r.some(function(r){return t[r]!==e.props[r]})},i=function(){return r(["width","height","style","className"])};return r(["options"])?(this.init(),this.reset(),this.draw(),i()):r(["nodes","edges","layout"])?(this.reset(),this.draw(),i()):i()}},{key:"componentDidUpdate",value:function(){this.draw()}},{key:"componentWillUnmount",value:function(){this.ccNetViz.remove()}},{key:"componentDidMount",value:function(){this.init(),this.reset(),this.draw()}},{key:"render",value:function(){var t=this.props,e=t.width,r=t.height,n=t.style,s=t.className;return i.default.createElement("canvas",{style:n,width:e,className:s,height:r,ref:this.canvasEl})}}])&&u(r.prototype,n),o&&u(r,o),e}();f.propTypes={options:n.default.object,layout:n.default.string,nodes:n.default.array.isRequired,edges:n.default.array.isRequired};var l=f;e.default=l,t.exports=e.default},function(e,r){e.exports=t},function(t,e,r){t.exports=r(3)()},function(t,e,r){"use strict";var i=r(4);function n(){}function s(){}s.resetWarningCache=n,t.exports=function(){function t(t,e,r,n,s,o){if(o!==i){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function e(){return t}t.isRequired=t;var r={array:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:s,resetWarningCache:n};return r.PropTypes=r,r}},function(t,e,r){"use strict";t.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(t,e,r){!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={exports:{},id:i,loaded:!1};return t[i].call(n.exports,n,n.exports,r),n.loaded=!0,n.exports}r.m=t,r.c=e,r.p="",r(0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,n=r(1),s=(i=n)&&i.__esModule?i:{default:i};var o=function(t,e){var r,i,n,o=new s.default(t,e),a=[],u={};t.addEventListener("contextmenu",i=function(t){if(a.length>0){var e=a.pop();u=e,o.set(u.nodes,u.edges),o.draw()}t.preventDefault()}),t.addEventListener("click",n=function(e){var i=t.getBoundingClientRect(),n=e.clientX-i.left,s=e.clientY-i.top,h=o.getLayerCoords({radius:5,x:n,y:s}),c=o.find(h.x,h.y,h.radius,!0,!1);if(c.nodes.length>0){var f=c.nodes[0].node,l=f.layout||r;if(f.__computedLayout?l=void 0:f.__computedLayout=!0,f.nodes&&f.edges){var d=f.nodes,v=f.edges;a.push(u),u={nodes:d,edges:v},o.set(u.nodes,u.edges,l),o.draw()}}}),this.remove=function(){t.removeEventListener("contextmenu",i),t.removeEventListener("click",n),o.remove()},this.set=function(t,e,i){u={nodes:t,edges:e},a=[],r=i,o.set.apply(o,arguments)};var h=this;["find","findArea","getLayerCoords","draw","resetView","setViewport","update","resetView"].forEach(function(t){!function(t,e){e[t]=function(){return o[t].apply(o,arguments)}}(t,h)})};window.ccNetVizMultiLevel=o,e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=g(r(2)),n=g(r(9)),s=g(r(4)),o=g(r(3)),a=g(r(7)),u=g(r(32)),h=g(r(33)),c=g(r(34)),f=g(r(42)),l=g(r(43)),d=g(r(29)),v=r(8);function g(t){return t&&t.__esModule?t:{default:t}}var p=document.createElement("canvas");function m(t){var e={depth:!1,antialias:!1};return t.getContext("webgl",e)||t.getContext("experimental-webgl",e)}var y=0;function w(t){void 0!==t.__uniqid?(t.uniqid=t.__uniqid,delete t.__uniqid):void 0===t.uniqid&&(t.uniqid=++y)}function x(t,e,r){var i=[];i.length=t.length+e.length;for(var n=0,s=0,o=0;n<t.length&&s<e.length;)r(t[n],e[s])<0?i[o++]=t[n++]:i[o++]=e[s++];for(;n<t.length;)i[o++]=t[n++];for(;s<e.length;)i[o++]=e[s++];return i}var _=function(t,e){var r=this,n=this;t=t||p;var d=e.styles.background=e.styles.background||{},g=new o.default(d.color||"rgb(255, 255, 255)"),y=!1,_=!1,b=e.styles.node=e.styles.node||{};if(b.minSize=null!=b.minSize?b.minSize:6,b.maxSize=b.maxSize||16,b.color=b.color||"rgb(255, 255, 255)",b.label){var M=b.label;M.color=M.color||"rgb(120, 120, 120)",M.font=M.font||{type:"Arial, Helvetica, sans-serif",size:11}}var E=e.styles.edge=e.styles.edge||{};E.width=E.width||1,E.color=E.color||"rgb(204, 204, 204)";var S=function(){e.onLoad&&!e.onLoad()||r.draw(!0)};if(E.arrow){var T=E.arrow;T.minSize=null!=T.minSize?T.minSize:6,T.maxSize=T.maxSize||12,T.aspect=1}var k=new f.default,R={},A=void 0,P=void 0,z=void 0,C=void 0,F=void 0,N=void 0,B={};this.cntShownNodes=function(){var t=0;for(var e in R)t+=R[e].cntShownNodes();return t};var O=e.getNodesCnt||this.cntShownNodes;this.cntShownEdges=function(){var t=0;for(var e in R)t+=R[e].cntShownEdges();return t};var V=e.getEdgesCnt||this.cntShownEdges,I=k.debounce(function(){return n.draw.call(n),!1},5);function D(){return!!y&&(console.error("Cannot call any function on graph after remove()"),!0)}var j=void 0,L=void 0;function q(){R.temp||(R.temp=new i.default(t,B,A,P,C,F,N,k,e,g,b,E,Y,G,W,H,O,V,I,S))}var U=void 0;function X(){return U||(U=new l.default(R,q,z,j,L,w)),U}this.set=function(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return D()?r:(L=e||[],(j=t||[]).forEach(w),L.forEach(w),R.temp&&R.temp.set([],[],i,n),R.main.set(j,L,i,n),U=void 0,_=!0,r)},this.reflow=function(){if(!D()){X().applyChanges();var t=R.main.getVisibleNodes();R.temp&&(t=t.concat(R.temp.getVisibleNodes()));var e=R.main.getVisibleEdges();R.temp&&(e=e.concat(R.temp.getVisibleEdges())),r.set(t,e),r.draw()}},this.removeNode=function(t){return D()?r:(X().removeNode(t),r)},this.removeEdge=function(t){return D()?r:(X().removeEdge(t),r)},this.addEdge=function(t){return D()?r:(X().addEdge(t),r)},this.addNode=function(t){return D()?r:(X().addNode(t),r)},this.updateNode=function(t){return D()?r:r.removeNode(t).addNode(t)},this.updateEdge=function(t){return D()?r:r.removeEdge(t).addEdge(t)},this.applyChanges=function(){return D()?r:(X().applyChanges(),r)},this.addEdges=function(t){return D()?r:(t.forEach(function(t){r.addEdge(t)}),r)},this.addNodes=function(t){return D()?r:(t.forEach(function(t){r.addNode(t)}),r)},this.removeEdges=function(t){return D()?r:(t.forEach(function(t){r.removeEdge(t)}),r)},this.removeNodes=function(t){return D()?r:(t.forEach(function(t){r.removeNode(t)}),r)},this.updateNodes=function(t){return D()?r:(t.forEach(function(t){r.updateNode(t)}),r)},this.updateEdges=function(t){return D()?r:(t.forEach(function(t){r.updateEdge(t)}),r)};var Y=function(t,e,r,i){var n=i*Math.sqrt(t.width*t.height/(r+1))/A.size;if(e){var s=e.size?e.size:e.minSize,o=e.size?e.size:e.maxSize;if((n=o?Math.min(o,n):n)<e.hideSize)return 0;n=s?Math.max(s,n):n}return n},G=function(t){return Y(t,t.style,O(),.4)},W=function(t,e){return Y(t,e,O(),.25)},H=function(t,e){if(e){var r=R.main.cntShownNodes(),i=.25*Math.sqrt(t.width*t.height/(r+1)),n=void 0;if(e.hideSize)return n=i/e.hideSize,e.maxSize&&(n=Math.min(n,i/e.maxSize)),n}return 1},$=.5*b.maxSize;this.draw=function(e){if((!e||!y&&_)&&!D()){var r=t.width,i=t.height,n=r/i,o=1===A.size?$:0,a=o/r,u=o/i;B.transform=s.default.ortho(A.x-a,A.x+A.size+a,A.y-u,A.y+A.size+u,-1,1),B.offsetX=a,B.offsetY=u,B.width=.5*r,B.height=.5*i,B.aspect2=n*n,B.aspect=n,B.count=O(),B.style&&delete B.style,B.curveExc=Y(B,void 0,V(),.5),B.style=b,B.nodeSize=G(B),P&&P.viewport(0,0,r,i),P&&P.clear(P.COLOR_BUFFER_BIT);for(var h=0;h<R.main.scene.elements.length;h++)R.main.scene.elements[h].draw(B),R.temp&&R.temp.scene.elements[h].draw(B)}},z=this.draw.bind(this),this.getScreenCoords=function(e){if(!D()){var r={},i=t.getBoundingClientRect();return void 0!==e.x&&(r.x=(e.x-A.x+B.offsetX)/(A.size+2*B.offsetX)*t.width+i.left),void 0!==e.y&&(r.y=(1-(e.y-A.y+B.offsetY)/(A.size+2*B.offsetY))*t.height+i.top),r}},this.getLayerCoords=function(e){if(!D()){var r={};if(["x","x1","x2"].forEach(function(i){if(void 0!==e[i]){var n=e[i];n=n/t.width*(A.size+2*B.offsetX)-B.offsetX+A.x,r[i]=n}}),["y","y1","y2"].forEach(function(i){if(void 0!==e[i]){var n=e[i];n=(1-n/t.height)*(A.size+2*B.offsetY)-B.offsetY+A.y,r[i]=n}}),void 0!==e.radius){var i=e.radius,n=i/t.height,s=i/t.width;i=Math.max(n,s)*A.size,r.radius=i}return r}};var Q=function(t,e){if(!D()&&P){var r=R.main[t].apply(R.main,e);if(!R.temp)return r;var i=R.temp[t].apply(R.temp,e),n={};for(var s in r)n[s]=x(r[s],i[s],function(t,e){return t.dist2-e.dist2});return n}};this.find=function(){return Q("find",arguments)},this.findArea=function(){return Q("findArea",arguments)},this.getTextPosition=function(t){if(!D()&&P){var r=.5*B.nodeSize,i=(2*(t.y<=.5?0:1)-1)*r,n=(0,v.getPartitionStyle)(e.styles[t.style],b,"label"),s=N.getEngine(n.font);s.setFont(n.font);var o=s.isSDF?W(B,n.label||{}):s.fontSize,a=o/s.fontSize;return 0===o&&(a=0),{offsetY:i,fontScale:a,chars:s.get(t.label,t.x,t.y)}}};var K,J=function(t,r){for(var i in r||{})r[i]&&t.addEventListener(i,r[i],{passive:e.passiveEvts})},Z=function(t,e){for(var r in e||{})e[r]&&t.removeEventListener(r,e[r])},tt=function(r){var i=this;if(1!==r.which)return;var n=function(t){if(!t.touches)return t;for(var e=0,r=0,i=0;i<t.touches.length;i++)e+=t.touches[i].clientX,r+=t.touches[i].clientY;return t.clientX=e/t.touches.length,t.clientY=r/t.touches.length,t};r=n(r);var s=t.width/A.size,o=t.height/A.size,a=r.clientX,u=r.clientY,h=A.x+a/s,c=u/o-A.y,f=e.onDrag,l=void 0,d=void 0,v=!0,g=!1,p=void 0,m=void 0;if(2===(r.touches||[]).length){var y=r.touches[0].clientX-r.touches[1].clientX,w=r.touches[0].clientY-r.touches[1].clientY;m=Math.sqrt(y*y+w*w),g=!0}var x=function(t){if((t=n(t)).touches&&1!=t.touches.length&&(v=!1),l)v&&(d?f.drag&&f.drag(t):(A.x=Math.max(0,Math.min(1-A.size,h-t.clientX/s)),A.y=Math.max(0,Math.min(1-A.size,t.clientY/o-c)),rt(),i.draw()));else{var g=void 0,p=void 0;t.touches&&t.touches.length>0?(g=t.touches[0].clientX,p=t.touches[0].clientY):(g=t.clientX,p=t.clientY);var m=g-a,y=p-u;m*m+y*y>8&&(l=!0,(d=f&&f.start(r))&&f.drag&&f.drag(t))}e.passiveEvts||t.preventDefault()},_=function(t){t=n(t),d&&f.stop&&f.stop(t),l||(e.onClick&&e.onClick(t),(new Date).getTime()-it<250?(e.onDblClick&&e.onDblClick(t),it=0):it=(new Date).getTime()),Z(window,p)},b=function(t){if((t=n(t)).touches&&2==t.touches.length){var e=t.touches[0].clientX-t.touches[1].clientX,r=t.touches[0].clientY-t.touches[1].clientY,i=Math.sqrt(e*e+r*r);t.deltaY=5*-(i-m),onWheelThis(t),m=i}};J(window,p={mouseup:_,touchend:_,touchcancel:_,mousemove:g?b:x,touchmove:g?b:x})}.bind(this);J(t,K={mousedown:tt,touchstart:tt,wheel:function(r){var i=t.getBoundingClientRect(),n=Math.min(1,A.size*(1+.001*(r.deltaMode?33:1)*r.deltaY)),s=n-A.size;e.passiveEvts||r.preventDefault();var o=A.size,a=A.x,u=A.y;if(A.size=n,A.x=Math.max(0,Math.min(1-n,A.x-s*(r.clientX-i.left)/t.width)),A.y=Math.max(0,Math.min(1-n,A.y-s*(1-(r.clientY-i.top)/t.height))),e.onZoom&&!1===e.onZoom(A))return A.size=o,A.x=a,void(A.y=u);rt(),this.draw()}.bind(this),contextmenu:e.onContextMenu}),this.remove=function(){if(!D()){for(var e in R)R[e].remove();if(P){P.viewport(0,0,2*B.width,2*B.height),P.clear(P.COLOR_BUFFER_BIT);var r=P.getExtension("WEBGL_lose_context");r&&r.loseContext()}Z(t,K),k.disable(),N&&N.remove(),y=!0}};var et={};function rt(){var t=!1;if(et)for(var r in A)et[r]!==A[r]&&(t=!0);a.default.extend(et,A),t&&e.onChangeViewport&&e.onChangeViewport(A)}var it=0;this.image=function(){if(!D())return t.toDataURL()},this.resize=function(){D()||(t.width=t.offsetWidth,t.height=t.offsetHeight)},this.getViewport=function(){return A},this.setViewport=function(t){D()||(a.default.extend(A,t),rt())},this.resetView=function(){return r.setViewport({size:1,x:0,y:0})},["update"].forEach(function(t){!function(t,e){e[t]=function(){var r=arguments;for(var i in R){var n=R[i];n[t].apply(n,r)}return e}}(t,n)}),(P=m(t))&&(P.clearColor(g.r,g.g,g.b,g.a),P.blendEquation(P.FUNC_ADD),P.blendFuncSeparate(P.SRC_ALPHA,P.ONE_MINUS_SRC_ALPHA,P.ONE,P.ONE),P.enable(P.BLEND)),A={size:1,x:0,y:0},this.resize(),C=new u.default(k,S),F=new h.default(k,S),N=P&&new c.default(P,F,C),R.main=new i.default(t,B,A,P,C,F,N,k,e,g,b,E,Y,G,W,H,O,V,I,S),P||console.warn("Cannot initialize WebGL context")};_.isWebGLSupported=function(){return!!m(p)},_.color=o.default,_.spatialSearch=d.default,_.layout=n.default,_.color=o.default,window.ccNetViz=_,e.default=_},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r,c,f,l,d,v,g,p,m,y,w,x,_,b,M,E,S,T){var k=this;M=M||function(){return k.nodes.length},E=E||function(){return k.edges.length},this.redraw=S||function(){},(g=g||{}).styles=g.styles||{};var R=function(t){return{set:function(t,e,r,i){var n=e.x,o=e.y;if(s.default.vertices(t.position,r,n,o,n,o,n,o,n,o),s.default.vertices(t.textureCoord,r,0,0,1,0,1,1,0,1),t.color){var a=e.color;s.default.colors(t.color,r,a,a,a,a)}s.default.quad(t.indices,r,i)}}},A=function(t){return function(t){var e=d.getEngine(t.font);return e.setFont(t.font),{set:function(t,r,i,n){for(var o=r.x,a=r.y,u=!1,h=e.get(r.label||"",o,a,function(){u=!0}),c=0;c<h.length;c++,i+=4,n+=6){var f=h[c];s.default.vertices(t.position,i,o,a,o,a,o,a,o,a),s.default.vertices(t.relative,i,f.dx,f.dy,f.width+f.dx,f.dy,f.width+f.dx,f.height+f.dy,f.dx,f.height+f.dy),s.default.vertices(t.textureCoord,i,f.left,f.bottom,f.right,f.bottom,f.right,f.top,f.left,f.top),s.default.quad(t.indices,i,n)}return u},size:function(t,r){return e.steps(r.label||"")}}}(t)},P=function(t,e){var r=e.x-t.x,i=e.y-t.y,n=1/Math.sqrt(r*r+i*i);return{x:n*r,y:n*i}},z=Math.cos(.9),C=Math.sin(.9),F={},N={},B={},O=function(t,e,r,i){var n,o,u,h,c,f,l,d;a.default.getCurveShift(i.e,F),u=F.x,h=F.y,l=F.cx,d=F.cy,a.default.getCurveShift(r.e,N),n=N.x,o=N.y,c=N.cx,f=N.cy,t.curveShift&&s.default.vertices(t.curveShift,e,-o,n,-o,n,-h,u,-h,u),t.circleShift&&s.default.vertices(t.circleShift,e,-f,c,-f,c,-d,l,-d,l)},V={lines:function(t){return{set:function(t,e,r,i){var n=a.default.edgeSource(e),o=a.default.edgeTarget(e),u=n.x-o.x,h=n.y-o.y,c=P(n,o);O(t,r,n,o),s.default.vertices(t.position,r,n.x,n.y,n.x,n.y,o.x,o.y,o.x,o.y),s.default.vertices(t.lengthSoFar,r,0,0,0,0,u,h,u,h),s.default.vertices(t.normal,r,-c.y,c.x,c.y,-c.x,c.y,-c.x,-c.y,c.x),s.default.quad(t.indices,r,i)}}},curves:function(t){return{numVertices:3,numIndices:3,set:function(t,e,r,i){var n=a.default.edgeSource(e),o=a.default.edgeTarget(e),u=n.x-o.x,h=n.y-o.y,c=P(n,o);O(t,r,n,o),s.default.vertices(t.position,r,n.x,n.y,.5*(o.x+n.x),.5*(o.y+n.y),o.x,o.y),s.default.vertices(t.lengthSoFar,r,0,0,u/2,h/2,u,h),s.default.vertices(t.normal,r,0,0,c.y,-c.x,0,0),s.default.vertices(t.curve,r,1,1,.5,0,0,0),s.default.indices(t.indices,r,i,0,1,2)}}},circles:function(t){return{set:function(t,e,r,i){var n=a.default.edgeSource(e),o=n.y<.5?1:-1,u=o,h=1.25*o,c=1.5*o;O(t,r,n,n),s.default.vertices(t.position,r,n.x,n.y,n.x,n.y,n.x,n.y,n.x,n.y),s.default.vertices(t.lengthSoFar,r,0,0,1,u,2,h,3,c),s.default.vertices(t.normal,r,0,0,1,o,0,1.25*o,-1,o),s.default.vertices(t.curve,r,1,1,.5,0,0,0,.5,0),s.default.quad(t.indices,r,i)}}}},I=function(t,e,r,i,n,o,u,h){var c,f,l,d,v=i.x,g=i.y,p=void 0;a.default.getCurveShift(i.e,B),c=B.x,f=B.y,l=B.cx,d=B.cy,p=i.is_edge?0:1,t.curveShift&&s.default.vertices(t.curveShift,n,-f,c,-f,c,-f,c,-f,c),t.circleShift&&s.default.vertices(t.circleShift,n,-d,l,-d,l,-d,l,-d,l),s.default.singles(t.offsetMul,n,p,p,p,p),s.default.vertices(t.position,n,v,g,v,g,v,g,v,g),s.default.vertices(t.direction,n,u,h,u,h,u,h,u,h),s.default.vertices(t.textureCoord,n,0,0,1,0,1,1,0,1),s.default.quad(t.indices,n,o)},D={lineArrows:function(t){return{set:function(t,e,r,i){var n=a.default.edgeSource(e),s=a.default.edgeTarget(e),o=P(n,s);I(t,0,0,s,r,i,o.x,o.y)}}},curveArrows:function(t){return{set:function(t,e,r,i){var n=a.default.edgeSource(e),s=a.default.edgeTarget(e);return I(t,0,0,s,r,i,.5*(s.x-n.x),.5*(s.y-n.y))}}},circleArrows:function(t){return{set:function(t,e,r,i){var n=a.default.edgeTarget(e);return I(t,0,0,n,r,i,n.x<.5?z:-z,n.y<.5?-C:C)}}}};this.getCurrentSpatialSearch=function(t){return void 0===q&&(q=new h.default(t,d,g,[],{},[],{},[],{},[],{},P,m,_,b)),q},this.remove=function(){};var j=void 0,L=void 0,q=void 0;this.set=function(t,e,r,i){U=0,X=0,this.nodes=t=t||[],this.edges=e=e?[].concat(e):[],q=void 0;for(var n=[],s=[],a=[],v=0;v<e.length;v++){var p=e[v];"number"==typeof p.source&&(p.source=t[p.source]),"number"==typeof p.target&&(p.target=t[p.target])}var w=function(t){return t.uniqid||-t.index||-t.nidx};!function(){for(var r=0;r<t.length;r++)t[r].index=r;for(var i=0,o=t.length+10;i<e.length;i++,o++)e[i].nidx=o;j=[],L=new Uint32Array(e.length);var u={k:"_",kArrow:"_",d:[]},h={k:"circles",kArrow:"circleArrows",d:a},c={k:"lines",kArrow:"lineArrows",d:n},f={k:"curves",kArrow:"curveArrows",d:s};if(Q.OES_standard_derivatives){for(var l={},d=0;d<e.length;d++){var v=e[d],g=w(v.source),p=w(v.target);(l[g]||(l[g]={}))[p]=!0}for(var m=0;m<e.length;m++){var y=void 0,x=e[m],_=w(x.source),b=w(x.target),M=u;if(_===b)x.t=2,y=a,M=h;else{var E=l[b];E&&E[_]?(x.t=1,y=s,M=f):(x.t=0,y=n,M=c)}j.push(M),L[m]=M.d.length,y.push(x)}}else for(var S=0;S<e.length;S++){var T=e[S],k=u;w(T.source)!==w(T.target)&&(k=c,T.t=0,n.push(T)),j.push(k),L[S]=k.d.length}}();var x=(0,u.partitionByStyle)(t),M=(0,u.partitionByStyle)(a),E=(0,u.partitionByStyle)(n),S=(0,u.partitionByStyle)(s);if(this.getCurrentSpatialSearch=function(e){return void 0===q&&(q=new h.default(e,d,g,t,x,n,E,s,S,a,M,P,m,_,b)),q},r&&new o.default[r](t,e,i).apply()&&o.default.normalize(t),c){for(var T,z,C,F,N,B;T=void 0,z=void 0,C=void 0,F=void 0,T=!1,z=function(t,e){"string"==typeof t.style.texture?t.style.texture=f.get(c,t.style.texture,e):e()},C=function(t,e){var r=(t.style.label||{}).font||{},i=d.getEngine(r);t.style.texture=i.getTexture(r,e)},F=void 0,F=t.length&&!t[0].color,T=T||K.nodes.set(c,g.styles,z,F?t:[],F?x:{},R),F=t.length&&t[0].color,T=T||K.nodesColored.set(c,g.styles,z,F?t:[],F?x:{},R),m.label&&(d.clear(),T=(T=T||K.labelsOutline.set(c,g.styles,C,t,x,A))||K.labels.set(c,g.styles,C,t,x,A),d.bind()),T=T||K.lines.set(c,g.styles,z,n,E,V.lines),Q.OES_standard_derivatives&&(T=(T=T||K.curves.set(c,g.styles,z,s,S,V.curves))||K.circles.set(c,g.styles,z,a,M,V.circles)),y.arrow&&(T=T||K.lineArrows.set(c,g.styles,z,n,E,D.lineArrows),Q.OES_standard_derivatives&&(T=(T=T||K.curveArrows.set(c,g.styles,z,s,S,D.curveArrows))||K.circleArrows.set(c,g.styles,z,a,M,D.circleArrows))),T;);N=!1,B=function(t){N&&k.set(k.nodes,k.edges)},l.onLoad(B),f.onLoad(B),N=!0}},this.update=function(t,e,r){c&&K[t].update(c,e,r,function(t){return{set:function(t,e,r){return s.default.colors(t,r,e,e,e,e)}}})},this.find=function(t,i,n,s,o,a){return k.getCurrentSpatialSearch(e).find(e,t,i,n,r.size,s,o,a)},this.findArea=function(t,i,n,s,o,a,u){return k.getCurrentSpatialSearch(e).findArea(e,t,i,n,s,r.size,o,a,u)},this.updateNode=function(t,r){k.nodes[r]=t,q&&q.update(e,"nodes",r,t),c&&((k.nodes[0].color?K.nodesColored:K.nodes).updateEl(c,t,r,R),K.labels&&K.labels.updateEl(c,t,r,A),K.labelsOutline&&K.labelsOutline.updateEl(c,t,r,A))},this.updateEdge=function(t,r){var i=j[r],n=L[r];i.d[n]=k.edges[r]=t,q&&q.update(e,i.k,n,t),c&&(K[i.k].updateEl(c,t,n,V[i.k]),y.arrow&&K[i.kArrow].updateEl(c,t,n,D[i.kArrow]))};var U=0,X=0,Y={x:-1,y:-1,title:""};this.removeNodeAtPos=function(t){k.nodes[t]!==Y&&(U++,k.updateNode(Y,t))};var G={source:{x:-1,y:-1},target:{x:-1,y:-1}};this.removeEdgeAtPos=function(t){k.edges[t]!==G&&(X++,k.updateEdge(G,t))},this.getVisibleNodes=function(){if(U<=0)return k.nodes;var t=[];return k.nodes.forEach(function(e){e!==Y&&t.push(e)}),t},this.getVisibleEdges=function(){if(X<=0)return k.edges;var t=[];return k.edges.forEach(function(e){e!==G&&t.push(e)}),t},this.cntShownNodes=function(){return k.nodes.length-U},this.cntShownEdges=function(){return k.edges.length-X};var W=function(t){return t.width/120},H={line:0,dashed:1,"chain-dotted":2,dotted:3},$=function(t){return void 0!==t&&(t=H[t]),void 0!==t&&"number"==typeof t||(t=0),t};this.nodes=[],this.edges=[];var Q=c?n.default.initExtensions(c,"OES_standard_derivatives"):{},K=this.scene=function(){return{elements:[],add:function(t,e){K[t]=e,K.elements.push(e)}}}.call(this),J=!1;if(!c)return g.onLoad&&!J&&(J=!0)&&g.onLoad(),this;var Z=["precision mediump float;","uniform vec4 color;","uniform sampler2D texture;","varying vec2 tc;","void main(void) {","   gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));","}"],tt=["precision mediump float;","uniform lowp sampler2D texture;","uniform mediump vec4 color;","uniform mediump float height_font;","uniform float type;","uniform float buffer;","uniform float boldness;","float gamma = 4.0 * 1.4142 * boldness / height_font;","varying mediump vec2 tc;","void main() {","  if(type > 0.5){","    float tx=texture2D(texture, tc).a;","    float a= smoothstep(buffer - gamma, buffer + gamma, tx);","    gl_FragColor=vec4(color.rgb, a*color.a);","  }else{","    gl_FragColor = color * texture2D(texture, vec2(tc.s, tc.t));","  }","}"],et=["   if(type >= 2.5){","      part = fract(part*3.0);","      if(part < 0.5) discard;","   }else if(type >= 1.5){","      if(part < 0.15) discard;","      if(part > 0.30 && part < 0.45) discard;","   }else if(type >= 0.5){","      if(part < 0.5) discard;","   }"],rt=["#extension GL_OES_standard_derivatives : enable","#ifdef GL_ES","precision highp float;","#endif","uniform float width;","uniform vec4 color;","uniform float type;","uniform float lineStepSize;","uniform float lineSize;","varying vec2 c;","varying vec2 v_lengthSoFar;","void main(void) {","   float part = abs(fract(length(v_lengthSoFar)*lineStepSize*lineSize));"].concat(et).concat(["   vec2 px = dFdx(c);","   vec2 py = dFdy(c);","   float fx = 2.0 * c.x * px.x - px.y;","   float fy = 2.0 * c.y * py.x - py.y;","   float sd = (c.x * c.x - c.y) / sqrt(fx * fx + fy * fy);","   float alpha = 1.0 - abs(sd) / width;","   if (alpha < 0.0) discard;","   gl_FragColor = vec4(color.r, color.g, color.b, min(alpha, 1.0));","}"]),it=["attribute vec2 curveShift;","vec4 getShiftCurve(void) {","   vec2 shiftN = vec2(curveShift.x, aspect2 * curveShift.y);","   float length = length(screen * shiftN);","   return vec4(exc * (length == 0.0 ? vec2(0, 0) : shiftN * 0.5 / length), 0, 0);","}","attribute vec2 circleShift;","vec4 getShiftCircle(void) {","   return vec4(size*circleShift,0,0);","}"];if(K.add("lines",new s.default(c,y,null,["precision mediump float;","attribute vec2 position;","attribute vec2 normal;","attribute vec2 lengthSoFar;","uniform float exc;","uniform vec2 size;","uniform vec2 screen;","uniform float aspect2;","uniform float aspect;","uniform vec2 width;","uniform mat4 transform;","varying vec2 n;","varying vec2 v_lengthSoFar;"].concat(it).concat(["void main(void) {","   gl_Position = getShiftCurve() + getShiftCircle() + vec4(width * normal, 0, 0) + transform * vec4(position, 0, 1);","   vec4 p = transform*vec4(lengthSoFar,0,0);","   v_lengthSoFar = vec2(p.x, p.y/aspect);","   n = normal;","}"]),["precision mediump float;","uniform float type;","uniform vec4 color;","varying vec2 n;","varying vec2 v_lengthSoFar;","uniform float lineSize;","void main(void) {","   float part = abs(fract(length(v_lengthSoFar)*lineSize*5.0));"].concat(et).concat(["   gl_FragColor = vec4(color.r, color.g, color.b, color.a - length(n));","}"]),function(t){var e=t.shader.uniforms;e.exc&&c.uniform1f(e.exc,t.curveExc),c.uniform2f(e.screen,t.width,t.height);var r=2.5*t.nodeSize;e.size&&c.uniform2f(e.size,r/t.width,r/t.height),c.uniform1f(e.lineSize,W(t)),c.uniform1f(e.aspect2,t.aspect2),c.uniform1f(e.aspect,t.aspect),c.uniform2f(e.width,t.style.width/t.width,t.style.width/t.height),c.uniform1f(e.type,$(t.style.type)),n.default.uniformColor(c,e.color,t.style.color)})),Q.OES_standard_derivatives&&(K.add("curves",new s.default(c,y,null,["precision highp float;","attribute vec2 position;","attribute vec2 normal;","attribute vec2 curve;","attribute vec2 lengthSoFar;","uniform vec2 size;","uniform float exc;","uniform vec2 screen;","uniform float aspect2;","uniform float aspect;","uniform mat4 transform;","varying vec2 v_lengthSoFar;","varying vec2 c;"].concat(it).concat(["void main(void) {","   vec2 n = vec2(normal.x, aspect2 * normal.y);","   float length = length(screen * n);","   n = length == 0.0 ? vec2(0, 0) : n / length;","   gl_Position = getShiftCurve() + getShiftCircle() + vec4(exc * n, 0, 0) + transform * vec4(position, 0, 1);","   c = curve;","   vec4 p = transform*vec4(lengthSoFar,0,0);","   v_lengthSoFar = vec2(p.x, p.y/aspect);","}"]),rt,function(t){var e=t.shader.uniforms;c.uniform1f(e.width,t.style.width),c.uniform1f(e.exc,t.curveExc),c.uniform2f(e.screen,t.width,t.height);var r=2.5*t.nodeSize;e.size&&c.uniform2f(e.size,r/t.width,r/t.height),c.uniform1f(e.lineSize,W(t)),c.uniform1f(e.aspect2,t.aspect2),c.uniform1f(e.aspect,t.aspect),c.uniform1f(e.type,$(t.style.type)),e.lineStepSize&&c.uniform1f(e.lineStepSize,5),n.default.uniformColor(c,e.color,t.style.color)})),K.add("circles",new s.default(c,y,null,["precision highp float;","attribute vec2 position;","attribute vec2 normal;","attribute vec2 curve;","attribute vec2 lengthSoFar;","uniform float exc;","uniform vec2 screen;","uniform float aspect2;","uniform float aspect;","uniform vec2 size;","uniform mat4 transform;","varying vec2 c;","varying vec2 v_lengthSoFar;"].concat(it).concat(["void main(void) {","   gl_Position = getShiftCurve() + getShiftCircle() + vec4(size * normal, 0, 0) + transform * vec4(position, 0, 1);","   c = curve;","   vec4 p = transform*vec4(size * lengthSoFar,0,0);","   v_lengthSoFar = vec2(p.x, p.y/aspect);","}"]),rt,function(t){var e=t.shader.uniforms;e.exc&&c.uniform1f(e.exc,t.curveExc),c.uniform1f(e.width,t.style.width),c.uniform1f(e.type,$(t.style.type)),c.uniform2f(e.screen,t.width,t.height);var r=2.5*t.nodeSize;e.size&&c.uniform2f(e.size,r/t.width,r/t.height),c.uniform1f(e.lineSize,W(t)),c.uniform1f(e.aspect2,t.aspect2),c.uniform1f(e.aspect,t.aspect),e.lineStepSize&&c.uniform1f(e.lineStepSize,5/3),n.default.uniformColor(c,e.color,t.style.color)}))),y.arrow){var nt={attribute:{offsetMul:1}},st=function(t){var e=w(t,t.style,E(),.2);if(!e)return!0;var i=t.shader.uniforms;c.uniform1f(i.offset,.5*t.nodeSize),c.uniform2f(i.arrowsize,e,t.style.aspect*e),c.uniform1f(i.exc,t.curveExc),i.cexc&&c.uniform1f(i.cexc,.5*r.size*t.curveExc),i.size&&(e=2.5*t.nodeSize,i.size&&c.uniform2f(i.size,e/t.width,e/t.height)),c.uniform2f(i.screen,t.width,t.height),c.uniform1f(i.aspect2,t.aspect2),n.default.uniformColor(c,i.color,t.style.color)};K.add("lineArrows",new s.default(c,y,"arrow",["attribute vec2 position;","attribute vec2 direction;","attribute vec2 textureCoord;","attribute float offsetMul;","uniform float offset;","uniform vec2 arrowsize;","uniform vec2 size;","uniform vec2 screen;","uniform float exc;","uniform float aspect2;","uniform mat4 transform;","varying vec2 tc;"].concat(it).concat(["void main(void) {","   vec2 u = direction / length(screen * direction);","   vec2 v = vec2(u.y, -aspect2 * u.x);","   v = v / length(screen * v);","   gl_Position = getShiftCurve() + getShiftCircle()  + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","}"]),Z,st,nt)),Q.OES_standard_derivatives&&(K.add("curveArrows",new s.default(c,y,"arrow",["attribute vec2 position;","attribute vec2 direction;","attribute vec2 textureCoord;","attribute float offsetMul;","uniform float offset;","uniform vec2 arrowsize;","uniform vec2 size;","uniform float exc;","uniform float cexc;","uniform vec2 screen;","uniform float aspect2;","uniform mat4 transform;","varying vec2 tc;"].concat(it).concat(["void main(void) {","   vec2 u = normalize(vec2(direction.y, -aspect2 * direction.x));","   u = normalize(direction - cexc * u / length(screen * u));","   u = u / length(screen * u);","   vec2 v = vec2(u.y, -aspect2 * u.x);","   v = v / length(screen * v);","   gl_Position = getShiftCurve() + getShiftCircle() + vec4(arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u, 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","}"]),Z,st,nt)),K.add("circleArrows",new s.default(c,y,"arrow",["attribute vec2 position;","attribute vec2 direction;","attribute vec2 textureCoord;","attribute float offsetMul;","uniform float offset;","uniform vec2 arrowsize;","uniform vec2 size;","uniform vec2 screen;","uniform float exc;","uniform float aspect2;","uniform mat4 transform;","varying vec2 tc;"].concat(it).concat(["void main(void) {","   vec2 u = direction;","   vec2 v = vec2(direction.y, -direction.x);","   gl_Position = getShiftCurve() + getShiftCircle() + vec4((arrowsize.x * (0.5 - textureCoord.x) * v - arrowsize.y * textureCoord.y * u - offset * offsetMul * u) / screen, 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","}"]),Z,st,nt)))}K.add("nodes",new s.default(c,m,null,["attribute vec2 position;","attribute vec2 textureCoord;","uniform vec2 size;","uniform mat4 transform;","varying vec2 tc;","void main(void) {","   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","}"],Z,function(t){var e=x(t),r=t.shader.uniforms;c.uniform2f(r.size,e/t.width,e/t.height),n.default.uniformColor(c,r.color,t.style.color)})),K.add("nodesColored",new s.default(c,m,null,["attribute vec2 position;","attribute vec2 textureCoord;","attribute vec4 color;","uniform vec2 size;","uniform mat4 transform;","varying vec2 tc;","varying vec4 c;","void main(void) {","   gl_Position = vec4(size * (textureCoord - vec2(0.5, 0.5)), 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","   c = color;","}"],["precision mediump float;","uniform sampler2D texture;","varying vec2 tc;","varying vec4 c;","void main(void) {","   gl_FragColor = c * texture2D(texture, vec2(tc.s, tc.t));","}"],function(t){var e=x(t),r=t.shader.uniforms;c.uniform2f(r.size,e/t.width,e/t.height)}));var ot=["attribute vec2 position;","attribute vec2 relative;","attribute vec2 textureCoord;","uniform float offset;","uniform vec2 scale;","uniform float fontScale;","uniform mat4 transform;","varying vec2 tc;","void main(void) {","   gl_Position = vec4(scale * (relative*fontScale + vec2(0, (2.0 * step(position.y, 0.5) - 1.0) * offset)), 0, 0) + transform * vec4(position, 0, 1);","   tc = textureCoord;","}"],at=function(t){return function(r){if(!x(r))return!0;var s=r.style.label,o=s.font,a=r.shader.uniforms;c.uniform1f(a.type,function(t){return d.isSDF(t)?1:0}(o));var u=d.getEngine(o);u.setFont(o);var h=1,f=u.fontSize,l=u.isSDF?_(e,s||{}):f;0===l&&(h=0),l&&f&&(h*=l/f),t&&!u.isSDF&&(h=0),c.uniform1f(a.buffer,t?.25:.75),c.uniform1f(a.boldness,(o?o.boldness:void 0)||1),c.uniform1f(a.fontScale,h),c.uniform1f(a.height_font,f),c.uniform1f(a.offset,.5*r.nodeSize),c.uniform2f(a.scale,1/r.width,1/r.height);var v=void 0;v=t&&o?new i.default(o.outlineColor||p):r.style.color,n.default.uniformColor(c,a.color,v)}};if(m.label&&K.add("labelsOutline",new s.default(c,m,"label",ot,tt,at(!0))),m.label&&K.add("labels",new s.default(c,m,"label",ot,tt,at(!1))),g.onLoad){var ut=g.styles;for(var ht in ut){var ct=ut[ht];ct.texture&&f.get(c,ct.texture,T),ct.arrow&&ct.arrow.texture&&f.get(c,ct.arrow.texture)}}};var i=c(r(3)),n=c(r(4)),s=c(r(5)),o=c(r(9)),a=c(r(28)),u=(c(r(7)),r(8)),h=c(r(29));function c(t){return t&&t.__esModule?t:{default:t}}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=function t(e){if(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.a=1,e instanceof t)this.r=e.r,this.g=e.g,this.b=e.b,this.a=e.a;else if(arguments.length>=3)this.r=arguments[0],this.g=arguments[1],this.b=arguments[2],arguments.length>3&&(this.a=arguments[3]);else if(/^rgba\((\d+), ?(\d+), ?(\d+), ?(\d+)\)$/i.test(e)){e=/^rgba\((\d+), ?(\d+), ?(\d+), ?(\d+)\)$/i.exec(e);var r=function(t){return parseInt(t,10)/255};this.r=r(e[1]),this.g=r(e[2]),this.b=r(e[3]),this.a=r(e[4])}else if(/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(e)){e=/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(e);var i=function(t){return parseInt(t,10)/255};this.r=i(e[1]),this.g=i(e[2]),this.b=i(e[3])}else if(/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(e)){e=/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(e);var n=function(t){return parseInt(t,10)/100};this.r=n(e[1]),this.g=n(e[2]),this.b=n(e[3])}else/^\#([0-9a-f]{6})$/i.test(e)?(e=parseInt(e.substring(1),16),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255):this.r=this.g=this.b=0}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,null,[{key:"initExtensions",value:function(t){for(var e=t.getSupportedExtensions(),r={},i=1;i<arguments.length;i++){var n=arguments[i];(r[n]=e.indexOf(n)>=0)&&t.getExtension(n)}return r}},{key:"createShader",value:function(t,e,r){var i=t.createShader(e);return t.shaderSource(i,r),t.compileShader(i),t.getShaderParameter(i,t.COMPILE_STATUS)?i:(console.log(t.getShaderInfoLog(i)),null)}},{key:"createTexture",value:function(t,e,r,i){var n=t.createTexture(),s=new Image,o=function(){s.onload=null,t.bindTexture(t.TEXTURE_2D,n),(i||{}).sdf?(t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.texImage2D(t.TEXTURE_2D,0,t.LUMINANCE,t.LUMINANCE,t.UNSIGNED_BYTE,s),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)):(t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,s),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR)),t.bindTexture(t.TEXTURE_2D,null),r&&r()};return s.onload=o,s.src=e,s.naturalWidth&&s.naturalHeight&&o(),n.image=s,n}},{key:"uniformColor",value:function(t,e,r){t.uniform4f(e,r.r,r.g,r.b,r.a)}},{key:"ortho",value:function(t,e,r,i,n,s){var o=1/(t-e),a=1/(r-i),u=1/(n-s),h=new Float32Array(16);return h[0]=-2*o,h[1]=0,h[2]=0,h[3]=0,h[4]=0,h[5]=-2*a,h[6]=0,h[7]=0,h[8]=0,h[9]=0,h[10]=2*u,h[11]=0,h[12]=(t+e)*o,h[13]=(i+r)*a,h[14]=(s+n)*u,h[15]=1,h}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=o(r(6)),s=(o(r(7)),r(8));function o(t){return t&&t.__esModule?t:{default:t}}var a=function(){function t(e,r,i,o,a,u,h){var c=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var f=new n.default(e,o.join("\n"),a.join("\n"),h),l=[],d=[],v={},g={},p=void 0,m=void 0,y=0,w=0,x=function(t,e){if(t.size){var r=0;return e.forEach(function(e){r+=t.size(g,e)}),r}return e.length},_=function(e,r){p=m=0;var i=Math.floor(t.maxBufferSize/e.numVertices),n=Math.min(i,r-(w-y)*i),s=n*e.numIndices;if(!g.indices||g.indices.length!==s)for(var o in g.indices=new Uint16Array(s),n*=e.numVertices,f.attributes)g[o]=new Float32Array(f.attributes[o].size*n)},b=function(e,r,i,n,s){for(var o=[e.indices,r,i],a=0;a<s;a++)o.push(0);for(var u=[void 0,r,i],h=0;h<n;h++)u.push(0);for(var f in e)"indices"===f?t.indices.apply(c,o):(u[0]=e[f],t.vertices.apply(c,u))};this.set=function(e,n,o,a,u,h){var b=!1;y=0,w=0,c._iIs=new Uint32Array(a.length),c._iVs=new Uint32Array(a.length),c._iBs=new Uint8Array(a.length),c._sizes=new Uint8Array(a.length);var M=function(t){var r=l[w];if(!r)for(var i in l[w]=r={},g)r[i]=e.createBuffer();for(var n in f.attributes)e.bindBuffer(e.ARRAY_BUFFER,r[n]),e.bufferData(e.ARRAY_BUFFER,g[n],e.STATIC_DRAW);e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r.indices),e.bufferData(e.ELEMENT_ARRAY_BUFFER,g.indices,e.STATIC_DRAW),r.numIndices=m,r.numVertices=p,t.buffers.push(r),w++};for(var E in d=[],u){y=w;var S={style:(0,s.getPartitionStyle)(n[E],r,i),buffers:[],styleName:E},T=h(S.style);T.numVertices=T.numVertices||4,T.numIndices=T.numIndices||6;var k=u[E],R=x(T,k);_(T,R);for(var A=t.maxBufferSize,P=0;P<k.length;P++){var z=T.size?T.size(g,k[P]):1,C=p+z*T.numVertices,F=m+z*T.numIndices;C>=A&&(M(S),_(T,R),C=p,F=m),T.set(g,k[P],p,m)&&(b=!0);var N=k.idx[P];c._iIs[N]=m,c._iVs[N]=p,c._iBs[N]=w,c._sizes[N]=z,m=F,p=C}M(S);var B=function(){d.push(this),v[this.styleName]=this}.bind(S);o?o(S,B):B()}return b};var M=void 0;this.update=function(t,e,r,i){var n=0,s=f.attributes[e].size;d.forEach(function(o){var a=i(o.style);a.numVertices=a.numVertices||4,o.buffers.forEach(function(i){(!M||M.length!==s*i.numVertices)&&(M=new Float32Array(s*i.numVertices));for(var o=0;o<i.numVertices;o+=(a.size?a.size(i,r[n]):1)*a.numVertices)a.set(M,r[n++],o);t.bindBuffer(t.ARRAY_BUFFER,i[e]),t.bufferData(t.ARRAY_BUFFER,M,t.DYNAMIC_DRAW)})})},this.updateEl=function(t,e,r,i){var n=v[e.style],s=i(n.style);s.numVertices=s.numVertices||4,s.numIndices=s.numIndices||6,w=y=0;var o=n.buffers[c._iBs[r]],a=s.size?s.size(o,e):1,u=c._sizes[r];if(a>u)console.error("Cannot set primitive to new value which has greater size ("+a+" > "+u+") - no enough empty space to fill in GL buffer");else{for(_(s,u),s.set(g,e,0,0);a<u;a++)b(g,a*s.numVertices,a*s.numIndices,s.numVertices,s.numIndices);!function(e,r,i){for(var n in f.attributes)t.bindBuffer(t.ARRAY_BUFFER,e[n]),t.bufferSubData(t.ARRAY_BUFFER,f.attributes[n].size*r*g[n].BYTES_PER_ELEMENT,g[n]);t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.indices),t.bufferSubData(t.ELEMENT_ARRAY_BUFFER,i*g.indices.BYTES_PER_ELEMENT,g.indices)}(o,c._iVs[r],c._iIs[r])}},this.draw=function(t){t.shader=f,f.bind(),e.uniformMatrix4fv(f.uniforms.transform,!1,t.transform),d.forEach(function(r){r.style.texture&&(r.style.texture.update&&r.style.texture.update(),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,r.style.texture),e.uniform1i(f.uniforms.texture,0)),t.style=r.style,u(t)||r.buffers.forEach(function(t){for(var r in e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t.indices),f.attributes){var i=f.attributes[r];e.bindBuffer(e.ARRAY_BUFFER,t[r]),e.vertexAttribPointer(i.index,i.size,e.FLOAT,!1,0,0)}e.drawElements(e.TRIANGLES,t.numIndices,e.UNSIGNED_SHORT,0)})}),f.unbind()}}return i(t,null,[{key:"vertices",value:function(t,e){for(var r=2,i=2*e,n=arguments.length;r<n;r++,i++)t[i]=arguments[r]}},{key:"singles",value:function(t,e){for(var r=2,i=1*e,n=arguments.length;r<n;r++,i++)t[i]=arguments[r]}},{key:"colors",value:function(t,e){for(var r=2,i=4*e,n=arguments.length;r<n;r++){var s=arguments[r];t[i++]=s.r,t[i++]=s.g,t[i++]=s.b,t[i++]=s.a}}},{key:"indices",value:function(t,e,r){for(var i=3,n=r,s=arguments.length;i<s;i++,n++)t[n]=e+arguments[i]}},{key:"quad",value:function(e,r,i){t.indices(e,r,i,0,1,2,2,3,0)}},{key:"maxBufferSize",get:function(){return 65536}}]),t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,n=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),s=r(4),o=(i=s)&&i.__esModule?i:{default:i};var a={color:4},u=function(){function t(e,r,i,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._gl=e,this._vs=r,this._fs=i;var s=this._program=e.createProgram();e.attachShader(s,o.default.createShader(e,e.VERTEX_SHADER,r)),e.attachShader(s,o.default.createShader(e,e.FRAGMENT_SHADER,i)),e.linkProgram(s),this.uniforms={};for(var a=e.getProgramParameter(s,e.ACTIVE_UNIFORMS),u=0;u<a;u++){var h=e.getActiveUniform(s,u).name;this.uniforms[h]=e.getUniformLocation(s,h)}var c=(n||{}).attribute||{};this.attributes={},a=e.getProgramParameter(s,e.ACTIVE_ATTRIBUTES);for(var f=0;f<a;f++){var l=e.getActiveAttrib(s,f).name;this.attributes[l]={index:f,size:c[l]||t.attribute[l]||2}}}return n(t,[{key:"bind",value:function(){this._gl.useProgram(this._program);for(var t=this._gl.getProgramParameter(this._program,this._gl.ACTIVE_ATTRIBUTES),e=0;e<t;e++)this._gl.enableVertexAttribArray(e)}},{key:"unbind",value:function(){for(var t=this._gl.getProgramParameter(this._program,this._gl.ACTIVE_ATTRIBUTES),e=0;e<t;e++)this._gl.disableVertexAttribArray(e)}}],[{key:"attribute",get:function(){return a}}]),t}();e.default=u},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,null,[{key:"extend",value:function(t){for(var e=1;e<arguments.length;e++)for(var r in arguments[e])t[r]=arguments[e][r];return t}},{key:"isObject",value:function(t){return t===Object(t)}},{key:"emptyObject",value:function(e){if(!t.isObject(e))return!1;for(var r in e)return!1;return!0}},{key:"ajax",value:function(t,e,r){var i,n;(i=new XMLHttpRequest).onreadystatechange=(n=e,function(){4==i.readyState&&200==i.status&&n("arraybuffer"==r?i.response:i.responseText)}),r&&(i.responseType=r),i.open("GET",t,!0),i.send()}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.getPartitionStyle=e.partitionByStyle=void 0;var i,n=r(3),s=(i=n)&&i.__esModule?i:{default:i};e.partitionByStyle=function(t){for(var e={},r={},i=0;i<t.length;i++){var n=t[i],s=e[n.style]=e[n.style]||[];void 0===s.idx&&(s.idx=[]),s.idx.push(i),n.sI=r[n.style]=void 0===r[n.style]?0:r[n.style]+1,s.push(n)}return e},e.getPartitionStyle=function(t,e,r){var i={},n=function(t){if(t)for(var e in t)i[e]=t[e]};return n(e),n(t),r&&(n(e[r]),t&&n(t[r])),i.color=i.color&&new s.default(i.color),i}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=p(r(10)),s=p(r(12)),o=p(r(13)),a=p(r(15)),u=p(r(16)),h=p(r(17)),c=p(r(18)),f=p(r(19)),l=p(r(24)),d=p(r(25)),v=p(r(26)),g=p(r(27));function p(t){return t&&t.__esModule?t:{default:t}}var m=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,null,[{key:"normalize",value:function(t,e){var r=void 0,i=void 0,n=t.length;if(e)r=e.minX,i=e.minY;else{var s=-1/0,o=-1/0;r=i=1/0;for(var a=0;a<n;a++){var u=t[a];s=Math.max(s,u.x),o=Math.max(o,u.y),r=Math.min(r,u.x),i=Math.min(i,u.y)}e={maxX:s,maxY:o,minX:r,minY:i}}for(var h=r!==e.maxX?1/(e.maxX-r):(r-=.5,1),c=i!==e.maxY?1/(e.maxY-i):(i-=.5,1),f=0;f<n;f++){var l=t[f];l.x=h*(l.x-r),l.y=c*(l.y-i)}return e}},{key:"force",get:function(){return n.default}},{key:"random",get:function(){return s.default}},{key:"circular",get:function(){return o.default}},{key:"tree",get:function(){return a.default}},{key:"tree2",get:function(){return u.default}},{key:"hierarchical",get:function(){return h.default}},{key:"hierarchical2",get:function(){return c.default}},{key:"spectral",get:function(){return f.default}},{key:"spectral2",get:function(){return l.default}},{key:"hive",get:function(){return d.default}},{key:"grid",get:function(){return v.default}},{key:"versinus",get:function(){return g.default}}]),t}();e.default=m},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e,r){var i=.9,n=-30,o=.4,a=.64,u=[1,1],h=1/0,c=void 0,f=[],l=[],d=[];function v(t){return function(e,r,i,n){if(e.point!==t){var s=e.cx-t.x,o=e.cy-t.y,u=n-r,c=s*s+o*o;if(u*u/a<c){if(c<h){var f=e.charge/c;t.px-=s*f,t.py-=o*f}return!0}if(e.point&&c&&c<h){var l=e.pointCharge/c;t.px-=s*l,t.py-=o*l}}return!e.charge}}function g(){if((c*=.99)<.05)return c=0,!0;for(var a=void 0,h=void 0,g=void 0,p=void 0,m=void 0,y=void 0,w=void 0,x=void 0,_=t.length,b=e.length,M=0;M<b;M++)g=(h=e[M]).source,(m=(w=(p=h.target).x-g.x)*w+(x=p.y-g.y)*x)&&(w*=m=c*l[M]*((m=Math.sqrt(m))-f[M])/m,x*=m,p.x-=w*(y=g.weight/(p.weight+g.weight)),p.y-=x*y,g.x+=w*(y=1-y),g.y+=x*y);if(y=c*o){w=u[0]/2,x=u[1]/2;for(var E=0;E<_;E++)(h=t[E]).x+=(w-h.x)*y,h.y+=(x-h.y)*y}if(n){!function t(e,r,i){var n=0,s=0;if(e.charge=0,!e.leaf)for(var o=e.nodes,a=void 0,u=o.length,h=0;h<u;h++)null!=(a=o[h])&&(t(a,r,i),e.charge+=a.charge,n+=a.charge*a.cx,s+=a.charge*a.cy);if(e.point){e.leaf||(e.point.x+=Math.random()-.5,e.point.y+=Math.random()-.5);var c=r*i[e.point.index];e.charge+=e.pointCharge=c,n+=c*e.point.x,s+=c*e.point.y}e.cx=n/e.charge,e.cy=s/e.charge}(a=(0,s.default)(t),c,d);for(var S=0;S<_;S++){var T=t[S];!T.fixed&&a.visit(v(T))}}for(var k=function(t,e){return Math.random()*(e-t)+t},R=0;R<_;R++)(h=t[R]).fixed||h.fixed2?(h.x=h.px,h.y=h.py):(h.x-=(h.px-(h.px=h.x))*i,h.y-=(h.py-(h.py=h.y))*i,r&&void 0!==r.minX&&((h.x<r.minX||h.x>r.maxX)&&(h.x=k(r.minX,r.maxX)),(h.y<r.minY||h.y>r.maxY)&&(h.y=k(r.minY,r.maxY))))}this.apply=function(){for(var r=t.length,i=Math.sqrt(r),s=.3/i,o=0;o<r;o++){var a=t[o];a.weight=0,a.x=void 0!==a.x?a.x:s+o%i/i,a.y=void 0!==a.y?a.y:s+Math.floor(o/i)/i,a.px=a.x,a.py=a.y,d[o]=n}for(var u=0;u<e.length;u++){var h=e[u];h.source.weight++,h.target.weight++,f[u]=15,l[u]=1}for(c=.1;!g(););return!0}};var i,n=r(11),s=(i=n)&&i.__esModule?i:{default:i}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e,r=void 0,i=void 0,n=void 0,s=void 0,o=void 0,a=void 0,u=void 0,h=void 0;for(u=h=-(o=a=1/0),i=[],n=[],e=t.length,s=0;s<e;++s)(r=t[s]).x<o&&(o=r.x),r.y<a&&(a=r.y),r.x>u&&(u=r.x),r.y>h&&(h=r.y),i.push(r.x),n.push(r.y);var c=u-o,f=h-a;function l(t,e,r,i,n,s,o,a){if(t.leaf){var u=t.x,h=t.y;if(null!==u)if(u===r&&h===i)d(t,e,r,i,n,s,o,a);else{var c=t.point;t.x=t.y=t.point=null,d(t,c,u,h,n,s,o,a),d(t,e,r,i,n,s,o,a)}else t.x=r,t.y=i,t.point=e}else d(t,e,r,i,n,s,o,a)}function d(t,e,r,i,n,s,o,a){var u=.5*(n+o),h=.5*(s+a),c=r>=u,f=i>=h,d=f<<1|c;t.leaf=!1,c?n=u:o=u,f?s=h:a=h,l(t=t.nodes[d]||(t.nodes[d]={leaf:!0,nodes:[],point:null,x:null,y:null}),e,r,i,n,s,o,a)}c>f?h=a+c:u=o+f;var v={leaf:!0,nodes:[],point:null,x:null,y:null};for(v.visit=function(t){return function t(e,r,i,n,s,o){if(!e(r,i,n,s,o)){var a=.5*(i+s),u=.5*(n+o),h=r.nodes;h[0]&&t(e,h[0],i,n,a,u),h[1]&&t(e,h[1],a,n,s,u),h[2]&&t(e,h[2],i,u,a,o),h[3]&&t(e,h[3],a,u,s,o)}}(t,v,o,a,u,h)},v.find=function(t,e){return function(t,e,r,i,n,s,o){var a=1/0,u=void 0;return function t(h,c,f,l,d){if(!(c>s||f>o||l<i||d<n)){if(point=h.point){var v=e-h.x,g=r-h.y,p=v*v+g*g;if(p<a){var m=Math.sqrt(a=p);i=e-m,n=r-m,s=e+m,o=r+m,u=void 0}}for(var y=h.nodes,w=.5*(c+l),x=.5*(f+d),_=(r>=x)<<1|e>=w,b=_+4;_<b;++_)if(h=y[3&_])switch(3&_){case 0:t(h,c,f,w,x);break;case 1:t(h,w,f,l,x);break;case 2:t(h,c,x,w,d);break;case 3:t(h,w,x,l,d)}}}(t,i,n,s,o),u}(v,t,e,o,a,u,h)},s=0;s<e;s++)l(v,t[s],i[s],n[s],o,a,u,h);return--s,i=n=t=r=null,v}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e}return r(t,[{key:"apply",value:function(){for(var t=0,e=this._nodes.length;t<e;t++){var r=this._nodes[t];r.x=Math.random(),r.y=Math.random()}}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this._angle_step=2*Math.PI/e.length,null==i.starting_angle?this._starting_angle=0:this._starting_angle=i.starting_angle}return i(t,[{key:"apply",value:function(){for(var t=(0,n.degrees)(this._nodes,this._edges),e=0;e<this._nodes.length;++e)this._nodes[t.nodes[e].index].x=.05+.45*(1+Math.cos(this._starting_angle+e*this._angle_step)),this._nodes[t.nodes[e].index].y=.05+.45*(1+Math.sin(this._starting_angle+e*this._angle_step)),this._nodes[t.nodes[e].index].weight=t.degrees[e]}}]),t}();e.default=s},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.create2dArray=function(t,e){return[].concat(function(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}(Array(t).keys())).map(function(t){return Array(e).fill(0)})},e.degrees=function(t,e){var r=Array(t.length).fill(0);e.forEach(function(t){r[t.source.index]+=1,r[t.target.index]+=1});var i=r.map(function(t,e){return{index:e,value:t}});i.sort(function(t,e){return+(t.value<e.value)||+(t.value===e.value)-1});var n=i.map(function(t){return r[t.index]});return{nodes:i,degrees:n}},e.getDepth=function t(e){var r=0;e.children&&e.children.forEach(function(e){if(1==e.depth_visited)throw new Error("This layout is only for trees acyclic graphs");e.depth_visited=!0;var i=t(e);i>r&&(r=i)});return 1+r},e.getRanges=function(t){if((t=Math.abs(t))<=1)return{start:.5,step:1};return{start:.05,step:.9/(t-1)}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r}return i(t,[{key:"drawTreeCentered",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;t.centered=!0,t.depth_visited=!1;for(var i=0,n=0;n<t.children.length;n++){var s=t.children[n];1!=s.centered&&(i+=this.drawTreeCentered(s,i+e,r+1))}return 0==t.children&&i++,t.y=this.stepy*(e+(i-1)/2)+this.alphay,t.x=(r-1)*this.stepx+this.alphax,i}},{key:"apply",value:function(){var t=this._nodes;t.forEach(function(t,e){t.parents=[],t.children=[],t.centered=!1}),this._edges.forEach(function(t,e){t.source.children.push(t.target),t.target.parents.push(t.source)});for(var e=0;e<t.length;e++)if(0==t[e].parents.length){var r=t[e];break}var i=(0,n.getDepth)(r),s=(0,n.getRanges)(i);this.alphax=s.start,this.stepx=s.step;var o=0;t.forEach(function(t){0==t.children.length&&o++}),s=(0,n.getRanges)(o),this.alphay=s.start,this.stepy=s.step,this.drawTreeCentered(r)}}]),t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r}return i(t,[{key:"drawTreeTop",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;t.visited=!0,t.depth_visited=!1,t.x=this.alphax+this.stepx*(r-1),t.y=1-(this.alphay+this.stepy*e);for(var i=0,n=0;n<t.children.length;n++){var s=t.children[n];1!=s.centered&&(i+=this.drawTreeTop(s,i+e,r+1))}return 0==t.children.length&&i++,i}},{key:"apply",value:function(){var t=this._nodes;t.forEach(function(t,e){t.parents=[],t.children=[],t.centered=!1}),this._edges.forEach(function(t,e){t.source.children.push(t.target),t.target.parents.push(t.source)});for(var e=0;e<t.length;e++)if(0==t[e].parents.length){var r=t[e];break}var i=(0,n.getDepth)(r),s=(0,n.getRanges)(i);this.alphax=s.start,this.stepx=s.step;var o=0;t.forEach(function(t){0==t.children.length&&o++}),s=(0,n.getRanges)(o),this.alphay=s.start,this.stepy=s.step,this.drawTreeTop(r)}}]),t}();e.default=s},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this.alphay=.05,this.alphax=.05}return r(t,[{key:"makeLayers",value:function(t,e){if(t.length>1)for(var r=(1-2*this.alphay)/(t.length-1),i=0;i<t.length;++i)t[i].visited=!0,t[i].layer=e,t[i].y=this.alphay+i*r;else t[0].visited=!0,t[0].layer=e,t[0].y=.5;for(var n=[],s=0;s<t.length;s++)for(var o=t[s].parents.concat(t[s].children),a=0;a<o.length;a++)0!=o[a].visited||n.includes(o[a])||n.push(o[a]);return 0==n.length?e:this.makeLayers(n,e+1)}},{key:"apply",value:function(){var t=this._nodes;t.forEach(function(t,e){t.parents=[],t.children=[],t.visited=!1}),this._edges.forEach(function(t,e){t.source.children.push(t.target),t.target.parents.push(t.source)});for(var e=[],r=0;r<t.length;r++)1==t[r].isroot&&e.push(t[r]);if(0==e.length)for(var i=0;i<t.length;i++)0==t[i].parents.length&&e.push(t[i]);if(0==e.length){var n=0;t.forEach(function(t){t.children.length>n&&(n=t.children.length)}),t.forEach(function(t){t.children.length==n&&e.push(t)})}for(var s=this.makeLayers(e,1),o=(1-2*this.alphax)/(s-1),a=0;a<this._nodes.length;++a)this._nodes[a].x=this.alphax+o*(this._nodes[a].layer-1)}}]),t}();e.default=i},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();function i(t){for(var e=!0,r=0;r<t.parents.length;++r){t.parents[r]!=t&&(e=!1)}for(var i=0;i<t.children.length;++i){t.children[i]!=t&&(e=!1)}return e}var n=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this.alphay=.05,this.alphax=.05,this.components={current_component:0,depth:1},this.unvisited=e}return r(t,[{key:"initHierarchy",value:function(){this._nodes.forEach(function(t,e){t.parents=[],t.children=[],t.visited=!1}),this._edges.forEach(function(t,e){t.source.children.push(t.target),t.target.parents.push(t.source)})}},{key:"separateOrphans",value:function(){for(var t=[],e=[],r=0;r<this._nodes.length;++r){var n=this._nodes[r];i(n)?t.push(n):e.push(n)}return t}},{key:"findRoots",value:function(t){for(var e=[],r=0;r<t.length;r++)1==t[r].isroot&&e.push(t[r]);if(0==e.length)for(var i=0;i<t.length;i++)0==t[i].parents.length&&e.push(t[i]);if(0==e.length){var n=0;t.forEach(function(t){t.children.length>n&&(n=t.children.length)}),t.forEach(function(t){t.children.length==n&&e.push(t)})}return e}},{key:"placeOrphans",value:function(t,e){for(var r=(1-2*this.alphay)/(t.length-1),i=0;i<t.length;++i)t[i].y=this.alphay+i*r,t[i].x=e+1;return t.length>0?e+1:e}},{key:"unvisitedNodes",value:function(){var t=[],e=this.orphans;this.unvisited.forEach(function(r){0!=r.visited||r in e||t.push(r)}),t.length!=this.unvisited?(this.maybe_more=!0,this.unvisited=t):this.maybe_more=!1}},{key:"placeAdditional",value:function(){for(var t=this.components[this.components.current_component].layers,e=0;e<this.unvisited.length;++e){for(var r=this.unvisited[e],i=this.components.depth,n=!1,s=0;s<r.children.length;++s){var o=r.children[s];if(1==o.visited){n=!0,o.layer<=i&&(i=o.layer);break}}if(n)r.visited=!0,i-sep in t||(t[i-sep]=[]),t[i-sep].push(r);else{for(var a=max_layer,u=!1,h=0;h<r.parents.length;++h){var c=r.parents[h];1==c.visited&&(u=!0,c.layer<=a&&(a=c.layer))}u&&(r.visited=!0,r.x=a+sep,a+sep in t||(t[a+sep]=[]),t[a+sep].push(r))}}}},{key:"initializeComponent",value:function(t){this.components[t]={},this.components[t].max_nodes_layer=0,this.components[t].index_offset=t>0?this.components[t-1].vertical_nodes:0,this.components[t].current_layer=1,this.components[t].layers={},this.components[t].vertical_nodes=0}},{key:"layerNodes",value:function(t){this.components.current_component in this.components||this.initializeComponent(this.components.current_component);var e=this.components[this.components.current_component];t.length>e.vertical_nodes&&(e.vertical_nodes=t.length),e.layers[e.current_layer]=[];for(var r=0;r<t.length;++r)t[r].visited=!0,e.layers[e.current_layer].push(t[r]);for(var i=[],n=0;n<t.length;n++)for(var s=t[n].children,o=0;o<s.length;o++)0!=s[o].visited||i.includes(s[o])||i.push(s[o]);i.length>0&&(e.current_layer++,this.components.depth<e.current_layer&&(this.components.depth=e.current_layer),this.layerNodes(i))}},{key:"apply",value:function(){for(this.initHierarchy(),this.orphans=this.separateOrphans(),this.unvisitedNodes();this.unvisited.length>0;){var t=this.findRoots(this.unvisited);for(this.layerNodes(t),this.unvisitedNodes(),this.maybe_mode=!0;this.maybe_more;)this.placeAdditional(),this.unvisitedNodes();this.components.current_component++}this.components.vertical_nodes=0;for(var e=0;e<this.components.current_component;e++)this.components.vertical_nodes+=this.components[e].vertical_nodes;for(var r=(1-2*this.alphax)/this.components.depth,i=(1-2*this.alphay)/this.components.vertical_nodes,n=0;n<this.components.current_component;n++){var s=this.components[n];for(var o in s.layers){var a=s.layers[o];if(1==a.length){var u=a[0];u.x=this.alphax+r*o,u.y=this.alphay+i*(s.index_offset+s.vertical_nodes/2)}else for(var h=0;h<a.length;++h){var c=a[h];c.x=this.alphax+r*o,c.y=this.alphay+i*(s.index_offset+h)}}}this.placeOrphans(this.orphans)}}]),t}();e.default=n},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(20),s=r(14);var o=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r}return i(t,[{key:"apply",value:function(){for(var t=(0,s.create2dArray)(this._nodes.length,this._nodes.length),e=0;e<this._edges.length;++e){var r=this._edges[e].source.index,i=this._edges[e].target.index;t[r][i]=-1,t[i][r]=-1}for(var o=0;o<this._nodes.length;++o)t[o][o]=-t[o].reduce(function(t,e){return t+e},0);var a=new n.EigenvalueDecomposition(t),u=function(t){var e=Math.min.apply(null,t),r=t.indexOf(e);t[r]=1/0;var i=Math.min.apply(null,t),n=t.indexOf(i);t[n]=1/0;var s=Math.min.apply(null,t);return[n,t.indexOf(s)]}(a.realEigenvalues),h=a.eigenvectorMatrix.transpose(),c=function(t,e){for(var r=Math.max.apply(null,t.map(Math.abs)),i=Math.max.apply(null,e.map(Math.abs)),n=Math.min.apply(null,t),s=Math.min.apply(null,e),o=0;o<t.length;++o)t[o]=.1+(t[o]-n)/(1.25*(r-n)),e[o]=.1+(e[o]-s)/(1.25*(i-s));return[t,e]}(h[u[0]],h[u[1]]);this._nodes.forEach(function(t,e){t.x=c[0][e],t.y=c[1][e]})}}]),t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,n=(i=r(21))&&"object"==typeof i&&"default"in i?i.default:i;Symbol.species||(Symbol.species=Symbol.for("@@species"));class s{constructor(t){var e,r,i,n,s,o,a,u,h,c=(t=C.checkMatrix(t)).clone(),f=c.rows,l=c.columns,d=new Array(f),v=1;for(e=0;e<f;e++)d[e]=e;for(u=new Array(f),r=0;r<l;r++){for(e=0;e<f;e++)u[e]=c.get(e,r);for(e=0;e<f;e++){for(h=Math.min(e,r),s=0,i=0;i<h;i++)s+=c.get(e,i)*u[i];u[e]-=s,c.set(e,r,u[e])}for(n=r,e=r+1;e<f;e++)Math.abs(u[e])>Math.abs(u[n])&&(n=e);if(n!==r){for(i=0;i<l;i++)o=c.get(n,i),c.set(n,i,c.get(r,i)),c.set(r,i,o);a=d[n],d[n]=d[r],d[r]=a,v=-v}if(r<f&&0!==c.get(r,r))for(e=r+1;e<f;e++)c.set(e,r,c.get(e,r)/c.get(r,r))}this.LU=c,this.pivotVector=d,this.pivotSign=v}isSingular(){for(var t=this.LU,e=t.columns,r=0;r<e;r++)if(0===t[r][r])return!0;return!1}solve(t){t=P.checkMatrix(t);var e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");var r,i,n,s=t.columns,o=t.subMatrixRow(this.pivotVector,0,s-1),a=e.columns;for(n=0;n<a;n++)for(r=n+1;r<a;r++)for(i=0;i<s;i++)o[r][i]-=o[n][i]*e[r][n];for(n=a-1;n>=0;n--){for(i=0;i<s;i++)o[n][i]/=e[n][n];for(r=0;r<n;r++)for(i=0;i<s;i++)o[r][i]-=o[n][i]*e[r][n]}return o}get determinant(){var t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");for(var e=this.pivotSign,r=t.columns,i=0;i<r;i++)e*=t[i][i];return e}get lowerTriangularMatrix(){for(var t=this.LU,e=t.rows,r=t.columns,i=new P(e,r),n=0;n<e;n++)for(var s=0;s<r;s++)i[n][s]=n>s?t[n][s]:n===s?1:0;return i}get upperTriangularMatrix(){for(var t=this.LU,e=t.rows,r=t.columns,i=new P(e,r),n=0;n<e;n++)for(var s=0;s<r;s++)i[n][s]=n<=s?t[n][s]:0;return i}get pivotPermutationVector(){return this.pivotVector.slice()}}function o(t,e){var r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}function a(t,e,r){for(var i=new Array(t),n=0;n<t;n++){i[n]=new Array(e);for(var s=0;s<e;s++)i[n][s]=r}return i}class u{constructor(t,e={}){var r=(t=C.checkMatrix(t)).rows,i=t.columns,n=Math.min(r,i);const{computeLeftSingularVectors:s=!0,computeRightSingularVectors:u=!0,autoTranspose:h=!1}=e;var c,f=Boolean(s),l=Boolean(u),d=!1;if(r<i)if(h){r=(c=t.transpose()).rows,i=c.columns,d=!0;var v=f;f=l,l=v}else c=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else c=t.clone();var g,p,m,y,w,x,_,b,M,E,S,T,k,R,A,P,z,F,N,B,O,V=new Array(Math.min(r+1,i)),I=a(r,n,0),D=a(i,i,0),j=new Array(i),L=new Array(r),q=Math.min(r-1,i),U=Math.max(0,Math.min(i-2,r));for(m=0,E=Math.max(q,U);m<E;m++){if(m<q){for(V[m]=0,g=m;g<r;g++)V[m]=o(V[m],c[g][m]);if(0!==V[m]){for(c[m][m]<0&&(V[m]=-V[m]),g=m;g<r;g++)c[g][m]/=V[m];c[m][m]+=1}V[m]=-V[m]}for(p=m+1;p<i;p++){if(m<q&&0!==V[m]){for(w=0,g=m;g<r;g++)w+=c[g][m]*c[g][p];for(w=-w/c[m][m],g=m;g<r;g++)c[g][p]+=w*c[g][m]}j[p]=c[m][p]}if(f&&m<q)for(g=m;g<r;g++)I[g][m]=c[g][m];if(m<U){for(j[m]=0,g=m+1;g<i;g++)j[m]=o(j[m],j[g]);if(0!==j[m]){for(j[m+1]<0&&(j[m]=0-j[m]),g=m+1;g<i;g++)j[g]/=j[m];j[m+1]+=1}if(j[m]=-j[m],m+1<r&&0!==j[m]){for(g=m+1;g<r;g++)L[g]=0;for(p=m+1;p<i;p++)for(g=m+1;g<r;g++)L[g]+=j[p]*c[g][p];for(p=m+1;p<i;p++)for(w=-j[p]/j[m+1],g=m+1;g<r;g++)c[g][p]+=w*L[g]}if(l)for(g=m+1;g<i;g++)D[g][m]=j[g]}}if(y=Math.min(i,r+1),q<i&&(V[q]=c[q][q]),r<y&&(V[y-1]=0),U+1<y&&(j[U]=c[U][y-1]),j[y-1]=0,f){for(p=q;p<n;p++){for(g=0;g<r;g++)I[g][p]=0;I[p][p]=1}for(m=q-1;m>=0;m--)if(0!==V[m]){for(p=m+1;p<n;p++){for(w=0,g=m;g<r;g++)w+=I[g][m]*I[g][p];for(w=-w/I[m][m],g=m;g<r;g++)I[g][p]+=w*I[g][m]}for(g=m;g<r;g++)I[g][m]=-I[g][m];for(I[m][m]=1+I[m][m],g=0;g<m-1;g++)I[g][m]=0}else{for(g=0;g<r;g++)I[g][m]=0;I[m][m]=1}}if(l)for(m=i-1;m>=0;m--){if(m<U&&0!==j[m])for(p=m+1;p<i;p++){for(w=0,g=m+1;g<i;g++)w+=D[g][m]*D[g][p];for(w=-w/D[m+1][m],g=m+1;g<i;g++)D[g][p]+=w*D[g][m]}for(g=0;g<i;g++)D[g][m]=0;D[m][m]=1}for(var X=y-1,Y=Number.EPSILON;y>0;){for(m=y-2;m>=-1&&-1!==m;m--)if(Math.abs(j[m])<=Y*(Math.abs(V[m])+Math.abs(V[m+1]))){j[m]=0;break}if(m===y-2)S=4;else{for(x=y-1;x>=m&&x!==m;x--)if(w=(x!==y?Math.abs(j[x]):0)+(x!==m+1?Math.abs(j[x-1]):0),Math.abs(V[x])<=Y*w){V[x]=0;break}x===m?S=3:x===y-1?S=1:(S=2,m=x)}switch(m++,S){case 1:for(_=j[y-2],j[y-2]=0,p=y-2;p>=m;p--)if(w=o(V[p],_),b=V[p]/w,M=_/w,V[p]=w,p!==m&&(_=-M*j[p-1],j[p-1]=b*j[p-1]),l)for(g=0;g<i;g++)w=b*D[g][p]+M*D[g][y-1],D[g][y-1]=-M*D[g][p]+b*D[g][y-1],D[g][p]=w;break;case 2:for(_=j[m-1],j[m-1]=0,p=m;p<y;p++)if(w=o(V[p],_),b=V[p]/w,M=_/w,V[p]=w,_=-M*j[p],j[p]=b*j[p],f)for(g=0;g<r;g++)w=b*I[g][p]+M*I[g][m-1],I[g][m-1]=-M*I[g][p]+b*I[g][m-1],I[g][p]=w;break;case 3:for(T=Math.max(Math.abs(V[y-1]),Math.abs(V[y-2]),Math.abs(j[y-2]),Math.abs(V[m]),Math.abs(j[m])),k=V[y-1]/T,R=V[y-2]/T,A=j[y-2]/T,P=V[m]/T,z=j[m]/T,N=k*A*(k*A),B=0,0===(F=((R+k)*(R-k)+A*A)/2)&&0===N||(B=Math.sqrt(F*F+N),F<0&&(B=-B),B=N/(F+B)),_=(P+k)*(P-k)+B,O=P*z,p=m;p<y-1;p++){if(b=_/(w=o(_,O)),M=O/w,p!==m&&(j[p-1]=w),_=b*V[p]+M*j[p],j[p]=b*j[p]-M*V[p],O=M*V[p+1],V[p+1]=b*V[p+1],l)for(g=0;g<i;g++)w=b*D[g][p]+M*D[g][p+1],D[g][p+1]=-M*D[g][p]+b*D[g][p+1],D[g][p]=w;if(b=_/(w=o(_,O)),M=O/w,V[p]=w,_=b*j[p]+M*V[p+1],V[p+1]=-M*j[p]+b*V[p+1],O=M*j[p+1],j[p+1]=b*j[p+1],f&&p<r-1)for(g=0;g<r;g++)w=b*I[g][p]+M*I[g][p+1],I[g][p+1]=-M*I[g][p]+b*I[g][p+1],I[g][p]=w}j[y-2]=_,1;break;case 4:if(V[m]<=0&&(V[m]=V[m]<0?-V[m]:0,l))for(g=0;g<=X;g++)D[g][m]=-D[g][m];for(;m<X&&!(V[m]>=V[m+1]);){if(w=V[m],V[m]=V[m+1],V[m+1]=w,l&&m<i-1)for(g=0;g<i;g++)w=D[g][m+1],D[g][m+1]=D[g][m],D[g][m]=w;if(f&&m<r-1)for(g=0;g<r;g++)w=I[g][m+1],I[g][m+1]=I[g][m],I[g][m]=w;m++}0,y--}}if(d){var G=D;D=I,I=G}this.m=r,this.n=i,this.s=V,this.U=I,this.V=D}solve(t){var e,r=t,i=this.threshold,n=this.s.length,s=P.zeros(n,n);for(e=0;e<n;e++)Math.abs(this.s[e])<=i?s[e][e]=0:s[e][e]=1/this.s[e];var o,a,u,h=this.U,c=this.rightSingularVectors,f=c.mmul(s),l=c.rows,d=h.length,v=P.zeros(l,d);for(e=0;e<l;e++)for(o=0;o<d;o++){for(u=0,a=0;a<n;a++)u+=f[e][a]*h[o][a];v[e][o]=u}return v.mmul(r)}solveForDiagonal(t){return this.solve(P.diag(t))}inverse(){var t,e,r=this.V,i=this.threshold,n=r.length,s=r[0].length,o=new P(n,this.s.length);for(t=0;t<n;t++)for(e=0;e<s;e++)Math.abs(this.s[e])>i?o[t][e]=r[t][e]/this.s[e]:o[t][e]=0;var a,u,h=this.U,c=h.length,f=h[0].length,l=new P(n,c);for(t=0;t<n;t++)for(e=0;e<c;e++){for(u=0,a=0;a<f;a++)u+=o[t][a]*h[e][a];l[t][e]=u}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){for(var t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s,i=0,n=r.length;i<n;i++)r[i]>t&&e++;return e}get diagonal(){return this.s}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return P.isMatrix(this.U)||(this.U=new P(this.U)),this.U}get rightSingularVectors(){return P.isMatrix(this.V)||(this.V=new P(this.V)),this.V}get diagonalMatrix(){return P.diag(this.s)}}function h(t,e,r){var i=r?t.rows:t.rows-1;if(e<0||e>i)throw new RangeError("Row index out of range")}function c(t,e,r){var i=r?t.columns:t.columns-1;if(e<0||e>i)throw new RangeError("Column index out of range")}function f(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function l(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function d(t,e,r){return{row:v(t,e),column:g(t,r)}}function v(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some(e=>e<0||e>=t.rows))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function g(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some(e=>e<0||e>=t.columns))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function p(t,e,r,i,n){if(5!==arguments.length)throw new TypeError("Invalid argument type");if(Array.from(arguments).slice(1).some(function(t){return"number"!=typeof t}))throw new TypeError("Invalid argument type");if(e>r||i>n||e<0||e>=t.rows||r<0||r>=t.rows||i<0||i>=t.columns||n<0||n>=t.columns)throw new RangeError("Submatrix indices are out of range")}function m(t){for(var e=P.zeros(t.rows,1),r=0;r<t.rows;++r)for(var i=0;i<t.columns;++i)e.set(r,0,e.get(r,0)+t.get(r,i));return e}function y(t){for(var e=P.zeros(1,t.columns),r=0;r<t.rows;++r)for(var i=0;i<t.columns;++i)e.set(0,i,e.get(0,i)+t.get(r,i));return e}class w extends(A()){constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}static get[Symbol.species](){return P}}class x extends w{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}class _ extends w{constructor(t,e){super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class b extends w{constructor(t,e,r,i,n){p(t,e,r,i,n),super(t,r-e+1,n-i+1),this.startRow=e,this.startColumn=i}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}class M extends w{constructor(t,e,r){var i=d(t,e,r);super(t,i.row.length,i.column.length),this.rowIndices=i.row,this.columnIndices=i.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class E extends w{constructor(t,e){super(t,(e=v(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class S extends w{constructor(t,e){e=g(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class T extends w{constructor(t,e){super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class k extends w{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class R extends w{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}function A(t){void 0===t&&(t=Object);class e extends t{static get[Symbol.species](){return this}static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError("Data length does not match given dimensions");for(var i=new this(t,e),n=0;n<t;n++)for(var s=0;s<e;s++)i.set(n,s,r[n*e+s]);return i}static rowVector(t){for(var e=new this(1,t.length),r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){for(var e=new this(t.length,1),r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static empty(t,e){return new this(t,e)}static zeros(t,e){return this.empty(t,e).fill(0)}static ones(t,e){return this.empty(t,e).fill(1)}static rand(t,e,r){void 0===r&&(r=Math.random);for(var i=this.empty(t,e),n=0;n<t;n++)for(var s=0;s<e;s++)i.set(n,s,r());return i}static randInt(t,e,r,i){void 0===r&&(r=1e3),void 0===i&&(i=Math.random);for(var n=this.empty(t,e),s=0;s<t;s++)for(var o=0;o<e;o++){var a=Math.floor(i()*r);n.set(s,o,a)}return n}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);for(var i=Math.min(t,e),n=this.zeros(t,e),s=0;s<i;s++)n.set(s,s,r);return n}static diag(t,e,r){var i=t.length;void 0===e&&(e=i),void 0===r&&(r=e);for(var n=Math.min(i,e,r),s=this.zeros(e,r),o=0;o<n;o++)s.set(o,o,t[o]);return s}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);for(var r=t.rows,i=t.columns,n=new this(r,i),s=0;s<r;s++)for(var o=0;o<i;o++)n.set(s,o,Math.min(t.get(s,o),e.get(s,o)));return n}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);for(var r=t.rows,i=t.columns,n=new this(r,i),s=0;s<r;s++)for(var o=0;o<i;o++)n.set(s,o,Math.max(t.get(s,o),e.get(s,o)));return n}static checkMatrix(t){return e.isMatrix(t)?t:new this(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(var e=this.rows,r=this.columns,i=0;i<e;i++)for(var n=0;n<r;n++)t.call(this,i,n);return this}to1DArray(){for(var t=new Array(this.size),e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)t[e*this.columns+r]=this.get(e,r);return t}to2DArray(){for(var t=new Array(this.rows),e=0;e<this.rows;e++){t[e]=new Array(this.columns);for(var r=0;r<this.columns;r++)t[e][r]=this.get(e,r)}return t}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isSymmetric(){if(this.isSquare()){for(var t=0;t<this.rows;t++)for(var e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}set(t,e,r){throw new Error("set method is unimplemented")}get(t,e){throw new Error("get method is unimplemented")}repeat(t,e){t=t||1,e=e||1;for(var r=new this.constructor[Symbol.species](this.rows*t,this.columns*e),i=0;i<t;i++)for(var n=0;n<e;n++)r.setSubMatrix(this,this.rows*i,this.columns*n);return r}fill(t){for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){h(this,t);for(var e=new Array(this.columns),r=0;r<this.columns;r++)e[r]=this.get(t,r);return e}getRowVector(t){return this.constructor.rowVector(this.getRow(t))}setRow(t,e){h(this,t),e=f(this,e);for(var r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){h(this,t),h(this,e);for(var r=0;r<this.columns;r++){var i=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,i)}return this}getColumn(t){c(this,t);for(var e=new Array(this.rows),r=0;r<this.rows;r++)e[r]=this.get(r,t);return e}getColumnVector(t){return this.constructor.columnVector(this.getColumn(t))}setColumn(t,e){c(this,t),e=l(this,e);for(var r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){c(this,t),c(this,e);for(var r=0;r<this.rows;r++){var i=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,i)}return this}addRowVector(t){t=f(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=f(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=f(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=f(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=l(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=l(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=l(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=l(this,t);for(var e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){h(this,t);for(var r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){c(this,t);for(var r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){for(var t=this.get(0,0),e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){for(var t=this.get(0,0),e=[0,0],r=0;r<this.rows;r++)for(var i=0;i<this.columns;i++)this.get(r,i)>t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}min(){for(var t=this.get(0,0),e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){for(var t=this.get(0,0),e=[0,0],r=0;r<this.rows;r++)for(var i=0;i<this.columns;i++)this.get(r,i)<t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}maxRow(t){h(this,t);for(var e=this.get(t,0),r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){h(this,t);for(var e=this.get(t,0),r=[t,0],i=1;i<this.columns;i++)this.get(t,i)>e&&(e=this.get(t,i),r[1]=i);return r}minRow(t){h(this,t);for(var e=this.get(t,0),r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){h(this,t);for(var e=this.get(t,0),r=[t,0],i=1;i<this.columns;i++)this.get(t,i)<e&&(e=this.get(t,i),r[1]=i);return r}maxColumn(t){c(this,t);for(var e=this.get(0,t),r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){c(this,t);for(var e=this.get(0,t),r=[0,t],i=1;i<this.rows;i++)this.get(i,t)>e&&(e=this.get(i,t),r[0]=i);return r}minColumn(t){c(this,t);for(var e=this.get(0,t),r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){c(this,t);for(var e=this.get(0,t),r=[0,t],i=1;i<this.rows;i++)this.get(i,t)<e&&(e=this.get(i,t),r[0]=i);return r}diag(){for(var t=Math.min(this.rows,this.columns),e=new Array(t),r=0;r<t;r++)e[r]=this.get(r,r);return e}sum(t){switch(t){case"row":return m(this);case"column":return y(this);default:return function(t){for(var e=0,r=0;r<t.rows;r++)for(var i=0;i<t.columns;i++)e+=t.get(r,i);return e}(this)}}mean(){return this.sum()/this.size}prod(){for(var t=1,e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)t*=this.get(e,r);return t}norm(t="frobenius"){var e=0;if("max"===t)return this.max();if("frobenius"===t){for(var r=0;r<this.rows;r++)for(var i=0;i<this.columns;i++)e+=this.get(r,i)*this.get(r,i);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){for(var t=0,e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){e.isMatrix(t)&&(t=t.to1DArray());var r=this.to1DArray();if(r.length!==t.length)throw new RangeError("vectors do not have the same size");for(var i=0,n=0;n<r.length;n++)i+=r[n]*t[n];return i}mmul(t){t=this.constructor.checkMatrix(t),this.columns!==t.rows&&console.warn("Number of columns of left matrix are not equal to number of rows of right matrix.");for(var e=this.rows,r=this.columns,i=t.columns,n=new this.constructor[Symbol.species](e,i),s=new Array(r),o=0;o<i;o++){for(var a=0;a<r;a++)s[a]=t.get(a,o);for(var u=0;u<e;u++){var h=0;for(a=0;a<r;a++)h+=this.get(u,a)*s[a];n.set(u,o,h)}}return n}strassen2x2(t){var e=new this.constructor[Symbol.species](2,2);const r=this.get(0,0),i=t.get(0,0),n=this.get(0,1),s=t.get(0,1),o=this.get(1,0),a=t.get(1,0),u=this.get(1,1),h=t.get(1,1),c=(r+u)*(i+h),f=(o+u)*i,l=r*(s-h),d=u*(a-i),v=(r+n)*h,g=c+d-v+(n-u)*(a+h),p=l+v,m=f+d,y=c-f+l+(o-r)*(i+s);return e.set(0,0,g),e.set(0,1,p),e.set(1,0,m),e.set(1,1,y),e}strassen3x3(t){var e=new this.constructor[Symbol.species](3,3);const r=this.get(0,0),i=this.get(0,1),n=this.get(0,2),s=this.get(1,0),o=this.get(1,1),a=this.get(1,2),u=this.get(2,0),h=this.get(2,1),c=this.get(2,2),f=t.get(0,0),l=t.get(0,1),d=t.get(0,2),v=t.get(1,0),g=t.get(1,1),p=t.get(1,2),m=t.get(2,0),y=t.get(2,1),w=t.get(2,2),x=(r-s)*(-l+g),_=(-r+s+o)*(f-l+g),b=(s+o)*(-f+l),M=r*f,E=(-r+u+h)*(f-d+p),S=(-r+u)*(d-p),T=(u+h)*(-f+d),k=(-n+h+c)*(g+m-y),R=(n-c)*(g-y),A=n*m,P=(h+c)*(-m+y),z=(-n+o+a)*(p+m-w),C=(n-a)*(p-w),F=(o+a)*(-m+w),N=M+A+i*v,B=(r+i+n-s-o-h-c)*g+_+b+M+k+A+P,O=M+E+T+(r+i+n-o-a-u-h)*p+A+z+F,V=x+o*(-f+l+v-g-p-m+w)+_+M+A+z+C,I=x+_+b+M+a*y,D=A+z+C+F+s*d,j=M+E+S+h*(-f+d+v-g-p-m+y)+k+R+A,L=k+R+A+P+u*l,q=M+E+S+T+c*w;return e.set(0,0,N),e.set(0,1,B),e.set(0,2,O),e.set(1,0,V),e.set(1,1,I),e.set(1,2,D),e.set(2,0,j),e.set(2,1,L),e.set(2,2,q),e}mmulStrassen(t){var r=this.clone(),i=r.rows,n=r.columns,s=t.rows,o=t.columns;function a(t,r,i){var n=t.rows,s=t.columns;if(n===r&&s===i)return t;var o=e.zeros(r,i);return o=o.setSubMatrix(t,0,0)}n!==s&&console.warn(`Multiplying ${i} x ${n} and ${s} x ${o} matrix: dimensions do not match.`);var u=Math.max(i,s),h=Math.max(n,o);return function t(r,i,n,s){if(n<=512||s<=512)return r.mmul(i);n%2==1&&s%2==1?(r=a(r,n+1,s+1),i=a(i,n+1,s+1)):n%2==1?(r=a(r,n+1,s),i=a(i,n+1,s)):s%2==1&&(r=a(r,n,s+1),i=a(i,n,s+1));var o=parseInt(r.rows/2),u=parseInt(r.columns/2),h=r.subMatrix(0,o-1,0,u-1),c=i.subMatrix(0,o-1,0,u-1),f=r.subMatrix(0,o-1,u,r.columns-1),l=i.subMatrix(0,o-1,u,i.columns-1),d=r.subMatrix(o,r.rows-1,0,u-1),v=i.subMatrix(o,i.rows-1,0,u-1),g=r.subMatrix(o,r.rows-1,u,r.columns-1),p=i.subMatrix(o,i.rows-1,u,i.columns-1),m=t(e.add(h,g),e.add(c,p),o,u),y=t(e.add(d,g),c,o,u),w=t(h,e.sub(l,p),o,u),x=t(g,e.sub(v,c),o,u),_=t(e.add(h,f),p,o,u),b=t(e.sub(d,h),e.add(c,l),o,u),M=t(e.sub(f,g),e.add(v,p),o,u),E=e.add(m,x);E.sub(_),E.add(M);var S=e.add(w,_),T=e.add(y,x),k=e.sub(m,y);k.add(w),k.add(b);var R=e.zeros(2*E.rows,2*E.columns);return(R=(R=(R=(R=R.setSubMatrix(E,0,0)).setSubMatrix(S,E.rows,0)).setSubMatrix(T,0,E.columns)).setSubMatrix(k,E.rows,E.columns)).subMatrix(0,n-1,0,s-1)}(r=a(r,u,h),t=a(t,u,h),u,h)}scaleRows(t,e){if((t=void 0===t?0:t)>=(e=void 0===e?1:e))throw new RangeError("min should be strictly smaller than max");for(var r=this.constructor.empty(this.rows,this.columns),i=0;i<this.rows;i++){var s=n(this.getRow(i),{min:t,max:e});r.setRow(i,s)}return r}scaleColumns(t,e){if((t=void 0===t?0:t)>=(e=void 0===e?1:e))throw new RangeError("min should be strictly smaller than max");for(var r=this.constructor.empty(this.rows,this.columns),i=0;i<this.columns;i++){var s=n(this.getColumn(i),{min:t,max:e});r.setColumn(i,s)}return r}kroneckerProduct(t){t=this.constructor.checkMatrix(t);for(var e=this.rows,r=this.columns,i=t.rows,n=t.columns,s=new this.constructor[Symbol.species](e*i,r*n),o=0;o<e;o++)for(var a=0;a<r;a++)for(var u=0;u<i;u++)for(var h=0;h<n;h++)s[i*o+u][n*a+h]=this.get(o,a)*t.get(u,h);return s}transpose(){for(var t=new this.constructor[Symbol.species](this.columns,this.rows),e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t){void 0===t&&(t=r);for(var e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t){void 0===t&&(t=r);for(var e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,i){p(this,t,e,r,i);for(var n=new this.constructor[Symbol.species](e-t+1,i-r+1),s=t;s<=e;s++)for(var o=r;o<=i;o++)n[s-t][o-r]=this.get(s,o);return n}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError("Argument out of range");for(var i=new this.constructor[Symbol.species](t.length,r-e+1),n=0;n<t.length;n++)for(var s=e;s<=r;s++){if(t[n]<0||t[n]>=this.rows)throw new RangeError("Row index out of range: "+t[n]);i.set(n,s-e,this.get(t[n],s))}return i}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError("Argument out of range");for(var i=new this.constructor[Symbol.species](r-e+1,t.length),n=0;n<t.length;n++)for(var s=e;s<=r;s++){if(t[n]<0||t[n]>=this.columns)throw new RangeError("Column index out of range: "+t[n]);i.set(s-e,n,this.get(s,t[n]))}return i}setSubMatrix(t,e,r){p(this,e,e+(t=this.constructor.checkMatrix(t)).rows-1,r,r+t.columns-1);for(var i=0;i<t.rows;i++)for(var n=0;n<t.columns;n++)this[e+i][r+n]=t.get(i,n);return this}selection(t,e){for(var r=d(this,t,e),i=new this.constructor[Symbol.species](t.length,e.length),n=0;n<r.row.length;n++)for(var s=r.row[n],o=0;o<r.column.length;o++){var a=r.column[o];i[n][o]=this.get(s,a)}return i}trace(){for(var t=Math.min(this.rows,this.columns),e=0,r=0;r<t;r++)e+=this.get(r,r);return e}transposeView(){return new x(this)}rowView(t){return h(this,t),new _(this,t)}columnView(t){return c(this,t),new T(this,t)}flipRowView(){return new k(this)}flipColumnView(){return new R(this)}subMatrixView(t,e,r,i){return new b(this,t,e,r,i)}selectionView(t,e){return new M(this,t,e)}rowSelectionView(t){return new E(this,t)}columnSelectionView(t){return new S(this,t)}det(){var t,e,r,i,n,o;if(this.isSquare())return 2===this.columns?(t=this.get(0,0),e=this.get(0,1),r=this.get(1,0),t*this.get(1,1)-e*r):3===this.columns?(i=this.selectionView([1,2],[1,2]),n=this.selectionView([1,2],[0,2]),o=this.selectionView([1,2],[0,1]),t=this.get(0,0),e=this.get(0,1),r=this.get(0,2),t*i.det()-e*n.det()+r*o.det()):new s(this).determinant;throw Error("Determinant can only be calculated for a square matrix.")}pseudoInverse(t){void 0===t&&(t=Number.EPSILON);for(var e=new u(this,{autoTranspose:!0}),r=e.leftSingularVectors,i=e.rightSingularVectors,n=e.diagonal,s=0;s<n.length;s++)Math.abs(n[s])>t?n[s]=1/n[s]:n[s]=0;return n=this.constructor[Symbol.species].diag(n),i.mmul(n.mmul(r.transposeView()))}clone(){for(var t=new this.constructor[Symbol.species](this.rows,this.columns),e=0;e<this.rows;e++)for(var r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}}function r(t,e){return t-e}e.prototype.klass="Matrix",e.random=e.rand,e.diagonal=e.diag,e.prototype.diagonal=e.prototype.diag,e.identity=e.eye,e.prototype.negate=e.prototype.neg,e.prototype.tensorProduct=e.prototype.kroneckerProduct,e.prototype.determinant=e.prototype.det;var i,o="\n\t(function %name%(matrix, %args%) {\n\t    var newMatrix = new this[Symbol.species](matrix);\n\t    return newMatrix.%name%(%args%);\n\t})\n\t",a=eval;for(var v of[["+","add"],["-","sub","subtract"],["*","mul","multiply"],["/","div","divide"],["%","mod","modulus"],["&","and"],["|","or"],["^","xor"],["<<","leftShift"],[">>","signPropagatingRightShift"],[">>>","rightShift","zeroFillRightShift"]]){var g=a(X("\n\t(function %name%(value) {\n\t    if (typeof value === 'number') return this.%name%S(value);\n\t    return this.%name%M(value);\n\t})\n\t",{name:v[1],op:v[0]})),w=a(X("\n\t(function %name%S(value) {\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, this.get(i, j) %op% value);\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",{name:v[1]+"S",op:v[0]})),A=a(X("\n\t(function %name%M(matrix) {\n\t    matrix = this.constructor.checkMatrix(matrix);\n\t    if (this.rows !== matrix.rows ||\n\t        this.columns !== matrix.columns) {\n\t        throw new RangeError('Matrices dimensions must be equal');\n\t    }\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",{name:v[1]+"M",op:v[0]})),P=a(X("\n\t(function %name%(matrix, value) {\n\t    var newMatrix = new this[Symbol.species](matrix);\n\t    return newMatrix.%name%(value);\n\t})\n\t",{name:v[1]}));for(i=1;i<v.length;i++)e.prototype[v[i]]=g,e.prototype[v[i]+"S"]=w,e.prototype[v[i]+"M"]=A,e[v[i]]=P}var z=[["~","not"]];for(var C of(["abs","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc"].forEach(function(t){z.push(["Math."+t,t])}),z)){var F=a(X("\n\t(function %name%() {\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, %method%(this.get(i, j)));\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",{name:C[1],method:C[0]})),N=a(X("\n\t(function %name%(matrix) {\n\t    var newMatrix = new this[Symbol.species](matrix);\n\t    return newMatrix.%name%();\n\t})\n\t",{name:C[1]}));for(i=1;i<C.length;i++)e.prototype[C[i]]=F,e[C[i]]=N}for(var B of[["Math.pow",1,"pow"]]){var O="arg0";for(i=1;i<B[1];i++)O+=`, arg${i}`;if(1!==B[1]){var V=a(X("\n\t(function %name%(%args%) {\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, %method%(this.get(i, j), %args%));\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",{name:B[2],method:B[0],args:O})),I=a(X(o,{name:B[2],args:O}));for(i=2;i<B.length;i++)e.prototype[B[i]]=V,e[B[i]]=I}else{var D={name:B[2],args:O,method:B[0]},j=a(X("\n\t(function %name%(value) {\n\t    if (typeof value === 'number') return this.%name%S(value);\n\t    return this.%name%M(value);\n\t})\n\t",D)),L=a(X("\n\t(function %name%S(value) {\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, %method%(this.get(i, j), value));\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",D)),q=a(X("\n\t(function %name%M(matrix) {\n\t    matrix = this.constructor.checkMatrix(matrix);\n\t    if (this.rows !== matrix.rows ||\n\t        this.columns !== matrix.columns) {\n\t        throw new RangeError('Matrices dimensions must be equal');\n\t    }\n\t    for (var i = 0; i < this.rows; i++) {\n\t        for (var j = 0; j < this.columns; j++) {\n\t            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n\t        }\n\t    }\n\t    return this;\n\t})\n\t",D)),U=a(X("\n\t(function %name%(matrix, %args%) {\n\t    var newMatrix = new this[Symbol.species](matrix);\n\t    return newMatrix.%name%(%args%);\n\t})\n\t",D));for(i=2;i<B.length;i++)e.prototype[B[i]]=j,e.prototype[B[i]+"M"]=q,e.prototype[B[i]+"S"]=L,e[B[i]]=U}}function X(t,e){for(var r in e)t=t.replace(new RegExp("%"+r+"%","g"),e[r]);return t}return e}class P extends(A(Array)){constructor(t,e){var r;if(1===arguments.length&&"number"==typeof t)return new Array(t);if(P.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>0){if(super(t),!(Number.isInteger(e)&&e>0))throw new TypeError("nColumns must be a positive integer");for(r=0;r<t;r++)this[r]=new Array(e)}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const i=t;if(t=i.length,"number"!=typeof(e=i[0].length)||0===e)throw new TypeError("Data must be a 2D array with at least one element");for(super(t),r=0;r<t;r++){if(i[r].length!==e)throw new RangeError("Inconsistent array dimensions");this[r]=[].concat(i[r])}}}return this.rows=t,this.columns=e,this}set(t,e,r){return this[t][e]=r,this}get(t,e){return this[t][e]}removeRow(t){if(h(this,t),1===this.rows)throw new RangeError("A matrix cannot have less than one row");return this.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),h(this,t,!0),e=f(this,e),this.splice(t,0,e),this.rows+=1,this}removeColumn(t){if(c(this,t),1===this.columns)throw new RangeError("A matrix cannot have less than one column");for(var e=0;e<this.rows;e++)this[e].splice(t,1);return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),c(this,t,!0),e=l(this,e);for(var r=0;r<this.rows;r++)this[r].splice(t,0,e[r]);return this.columns+=1,this}}class z extends(A()){constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){var i=this._calculateIndex(t,e);return this.data[i]=r,this}get(t,e){var r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}static get[Symbol.species](){return P}}class C extends(A()){constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}static get[Symbol.species](){return P}}class F{constructor(t){var e,r,i,n,s=(t=C.checkMatrix(t)).clone(),a=t.rows,u=t.columns,h=new Array(u);for(i=0;i<u;i++){var c=0;for(e=i;e<a;e++)c=o(c,s.get(e,i));if(0!==c){for(s.get(i,i)<0&&(c=-c),e=i;e<a;e++)s.set(e,i,s.get(e,i)/c);for(s.set(i,i,s.get(i,i)+1),r=i+1;r<u;r++){for(n=0,e=i;e<a;e++)n+=s.get(e,i)*s.get(e,r);for(n=-n/s.get(i,i),e=i;e<a;e++)s.set(e,r,s.get(e,r)+n*s.get(e,i))}}h[i]=-c}this.QR=s,this.Rdiag=h}solve(t){t=P.checkMatrix(t);var e=this.QR,r=e.rows;if(t.rows!==r)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");var i,n,s,o,a=t.columns,u=t.clone(),h=e.columns;for(s=0;s<h;s++)for(n=0;n<a;n++){for(o=0,i=s;i<r;i++)o+=e[i][s]*u[i][n];for(o=-o/e[s][s],i=s;i<r;i++)u[i][n]+=o*e[i][s]}for(s=h-1;s>=0;s--){for(n=0;n<a;n++)u[s][n]/=this.Rdiag[s];for(i=0;i<s;i++)for(n=0;n<a;n++)u[i][n]-=u[s][n]*e[i][s]}return u.subMatrix(0,h-1,0,a-1)}isFullRank(){for(var t=this.QR.columns,e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){var t,e,r=this.QR,i=r.columns,n=new P(i,i);for(t=0;t<i;t++)for(e=0;e<i;e++)n[t][e]=t<e?r[t][e]:t===e?this.Rdiag[t]:0;return n}get orthogonalMatrix(){var t,e,r,i,n=this.QR,s=n.rows,o=n.columns,a=new P(s,o);for(r=o-1;r>=0;r--){for(t=0;t<s;t++)a[t][r]=0;for(a[r][r]=1,e=r;e<o;e++)if(0!==n[r][r]){for(i=0,t=r;t<s;t++)i+=n[t][r]*a[t][e];for(i=-i/n[r][r],t=r;t<s;t++)a[t][e]+=i*n[t][r]}}return a}}function N(t,e,r=!1){return t=C.checkMatrix(t),e=C.checkMatrix(e),r?new u(t).solve(e):t.isSquare()?new s(t).solve(e):new F(t).solve(e)}class B{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=C.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");var i,n,s=t.columns,u=a(s,s,0),h=new Array(s),c=new Array(s),f=t;if(!!r||t.isSymmetric()){for(i=0;i<s;i++)for(n=0;n<s;n++)u[i][n]=f.get(i,n);!function(t,e,r,i){var n,s,o,a,u,h,c,f;for(u=0;u<t;u++)r[u]=i[t-1][u];for(a=t-1;a>0;a--){for(f=0,o=0,h=0;h<a;h++)f+=Math.abs(r[h]);if(0===f)for(e[a]=r[a-1],u=0;u<a;u++)r[u]=i[a-1][u],i[a][u]=0,i[u][a]=0;else{for(h=0;h<a;h++)r[h]/=f,o+=r[h]*r[h];for(n=r[a-1],s=Math.sqrt(o),n>0&&(s=-s),e[a]=f*s,o-=n*s,r[a-1]=n-s,u=0;u<a;u++)e[u]=0;for(u=0;u<a;u++){for(n=r[u],i[u][a]=n,s=e[u]+i[u][u]*n,h=u+1;h<=a-1;h++)s+=i[h][u]*r[h],e[h]+=i[h][u]*n;e[u]=s}for(n=0,u=0;u<a;u++)e[u]/=o,n+=e[u]*r[u];for(c=n/(o+o),u=0;u<a;u++)e[u]-=c*r[u];for(u=0;u<a;u++){for(n=r[u],s=e[u],h=u;h<=a-1;h++)i[h][u]-=n*e[h]+s*r[h];r[u]=i[a-1][u],i[a][u]=0}}r[a]=o}for(a=0;a<t-1;a++){if(i[t-1][a]=i[a][a],i[a][a]=1,0!==(o=r[a+1])){for(h=0;h<=a;h++)r[h]=i[h][a+1]/o;for(u=0;u<=a;u++){for(s=0,h=0;h<=a;h++)s+=i[h][a+1]*i[h][u];for(h=0;h<=a;h++)i[h][u]-=s*r[h]}}for(h=0;h<=a;h++)i[h][a+1]=0}for(u=0;u<t;u++)r[u]=i[t-1][u],i[t-1][u]=0;i[t-1][t-1]=1,e[0]=0}(s,c,h,u),function(t,e,r,i){var n,s,a,u,h,c,f,l,d,v,g,p,m,y,w,x;for(a=1;a<t;a++)e[a-1]=e[a];e[t-1]=0;var _=0,b=0,M=Number.EPSILON;for(c=0;c<t;c++){for(b=Math.max(b,Math.abs(r[c])+Math.abs(e[c])),f=c;f<t&&!(Math.abs(e[f])<=M*b);)f++;if(f>c){0;do{for(1,n=r[c],l=(r[c+1]-n)/(2*e[c]),d=o(l,1),l<0&&(d=-d),r[c]=e[c]/(l+d),r[c+1]=e[c]*(l+d),v=r[c+1],s=n-r[c],a=c+2;a<t;a++)r[a]-=s;for(_+=s,l=r[f],p=g=1,m=g,y=e[c+1],w=0,x=0,a=f-1;a>=c;a--)for(m=p,p=g,x=w,n=g*e[a],s=g*l,d=o(l,e[a]),e[a+1]=w*d,w=e[a]/d,l=(g=l/d)*r[a]-w*n,r[a+1]=s+w*(g*n+w*r[a]),h=0;h<t;h++)s=i[h][a+1],i[h][a+1]=w*i[h][a]+g*s,i[h][a]=g*i[h][a]-w*s;l=-w*x*m*y*e[c]/v,e[c]=w*l,r[c]=g*l}while(Math.abs(e[c])>M*b)}r[c]=r[c]+_,e[c]=0}for(a=0;a<t-1;a++){for(h=a,l=r[a],u=a+1;u<t;u++)r[u]<l&&(h=u,l=r[u]);if(h!==a)for(r[h]=r[a],r[a]=l,u=0;u<t;u++)l=i[u][a],i[u][a]=i[u][h],i[u][h]=l}}(s,c,h,u)}else{var l=a(s,s,0),d=new Array(s);for(n=0;n<s;n++)for(i=0;i<s;i++)l[i][n]=f.get(i,n);!function(t,e,r,i){var n,s,o,a,u,h,c,f=t-1;for(h=1;h<=f-1;h++){for(c=0,a=h;a<=f;a++)c+=Math.abs(e[a][h-1]);if(0!==c){for(o=0,a=f;a>=h;a--)r[a]=e[a][h-1]/c,o+=r[a]*r[a];for(s=Math.sqrt(o),r[h]>0&&(s=-s),o-=r[h]*s,r[h]=r[h]-s,u=h;u<t;u++){for(n=0,a=f;a>=h;a--)n+=r[a]*e[a][u];for(n/=o,a=h;a<=f;a++)e[a][u]-=n*r[a]}for(a=0;a<=f;a++){for(n=0,u=f;u>=h;u--)n+=r[u]*e[a][u];for(n/=o,u=h;u<=f;u++)e[a][u]-=n*r[u]}r[h]=c*r[h],e[h][h-1]=c*s}}for(a=0;a<t;a++)for(u=0;u<t;u++)i[a][u]=a===u?1:0;for(h=f-1;h>=1;h--)if(0!==e[h][h-1]){for(a=h+1;a<=f;a++)r[a]=e[a][h-1];for(u=h;u<=f;u++){for(s=0,a=h;a<=f;a++)s+=r[a]*i[a][u];for(s=s/r[h]/e[h][h-1],a=h;a<=f;a++)i[a][u]+=s*r[a]}}}(s,l,d,u),function(t,e,r,i,n){var s,o,a,u,h,c,f,l,d,v,g,p,m,y,w,x=t-1,_=t-1,b=Number.EPSILON,M=0,E=0,S=0,T=0,k=0,R=0,A=0,P=0;for(s=0;s<t;s++)for((s<0||s>_)&&(r[s]=n[s][s],e[s]=0),o=Math.max(s-1,0);o<t;o++)E+=Math.abs(n[s][o]);for(;x>=0;){for(u=x;u>0&&(0===(R=Math.abs(n[u-1][u-1])+Math.abs(n[u][u]))&&(R=E),!(Math.abs(n[u][u-1])<b*R));)u--;if(u===x)n[x][x]=n[x][x]+M,r[x]=n[x][x],e[x]=0,x--,P=0;else if(u===x-1){if(f=n[x][x-1]*n[x-1][x],S=(n[x-1][x-1]-n[x][x])/2,T=S*S+f,A=Math.sqrt(Math.abs(T)),n[x][x]=n[x][x]+M,n[x-1][x-1]=n[x-1][x-1]+M,l=n[x][x],T>=0){for(A=S>=0?S+A:S-A,r[x-1]=l+A,r[x]=r[x-1],0!==A&&(r[x]=l-f/A),e[x-1]=0,e[x]=0,l=n[x][x-1],R=Math.abs(l)+Math.abs(A),S=l/R,T=A/R,k=Math.sqrt(S*S+T*T),S/=k,T/=k,o=x-1;o<t;o++)A=n[x-1][o],n[x-1][o]=T*A+S*n[x][o],n[x][o]=T*n[x][o]-S*A;for(s=0;s<=x;s++)A=n[s][x-1],n[s][x-1]=T*A+S*n[s][x],n[s][x]=T*n[s][x]-S*A;for(s=0;s<=_;s++)A=i[s][x-1],i[s][x-1]=T*A+S*i[s][x],i[s][x]=T*i[s][x]-S*A}else r[x-1]=l+S,r[x]=l+S,e[x-1]=A,e[x]=-A;x-=2,P=0}else{if(l=n[x][x],d=0,f=0,u<x&&(d=n[x-1][x-1],f=n[x][x-1]*n[x-1][x]),10===P){for(M+=l,s=0;s<=x;s++)n[s][s]-=l;R=Math.abs(n[x][x-1])+Math.abs(n[x-1][x-2]),l=d=.75*R,f=-.4375*R*R}if(30===P&&(R=(R=(d-l)/2)*R+f)>0){for(R=Math.sqrt(R),d<l&&(R=-R),R=l-f/((d-l)/2+R),s=0;s<=x;s++)n[s][s]-=R;M+=R,l=d=f=.964}for(P+=1,h=x-2;h>=u&&(A=n[h][h],S=((k=l-A)*(R=d-A)-f)/n[h+1][h]+n[h][h+1],T=n[h+1][h+1]-A-k-R,k=n[h+2][h+1],R=Math.abs(S)+Math.abs(T)+Math.abs(k),S/=R,T/=R,k/=R,h!==u)&&!(Math.abs(n[h][h-1])*(Math.abs(T)+Math.abs(k))<b*(Math.abs(S)*(Math.abs(n[h-1][h-1])+Math.abs(A)+Math.abs(n[h+1][h+1]))));)h--;for(s=h+2;s<=x;s++)n[s][s-2]=0,s>h+2&&(n[s][s-3]=0);for(a=h;a<=x-1&&(y=a!==x-1,a!==h&&(S=n[a][a-1],T=n[a+1][a-1],k=y?n[a+2][a-1]:0,0!==(l=Math.abs(S)+Math.abs(T)+Math.abs(k))&&(S/=l,T/=l,k/=l)),0!==l);a++)if(R=Math.sqrt(S*S+T*T+k*k),S<0&&(R=-R),0!==R){for(a!==h?n[a][a-1]=-R*l:u!==h&&(n[a][a-1]=-n[a][a-1]),l=(S+=R)/R,d=T/R,A=k/R,T/=S,k/=S,o=a;o<t;o++)S=n[a][o]+T*n[a+1][o],y&&(S+=k*n[a+2][o],n[a+2][o]=n[a+2][o]-S*A),n[a][o]=n[a][o]-S*l,n[a+1][o]=n[a+1][o]-S*d;for(s=0;s<=Math.min(x,a+3);s++)S=l*n[s][a]+d*n[s][a+1],y&&(S+=A*n[s][a+2],n[s][a+2]=n[s][a+2]-S*k),n[s][a]=n[s][a]-S,n[s][a+1]=n[s][a+1]-S*T;for(s=0;s<=_;s++)S=l*i[s][a]+d*i[s][a+1],y&&(S+=A*i[s][a+2],i[s][a+2]=i[s][a+2]-S*k),i[s][a]=i[s][a]-S,i[s][a+1]=i[s][a+1]-S*T}}}if(0===E)return;for(x=t-1;x>=0;x--)if(S=r[x],0===(T=e[x]))for(u=x,n[x][x]=1,s=x-1;s>=0;s--){for(f=n[s][s]-S,k=0,o=u;o<=x;o++)k+=n[s][o]*n[o][x];if(e[s]<0)A=f,R=k;else if(u=s,0===e[s]?n[s][x]=0!==f?-k/f:-k/(b*E):(l=n[s][s+1],d=n[s+1][s],T=(r[s]-S)*(r[s]-S)+e[s]*e[s],c=(l*R-A*k)/T,n[s][x]=c,n[s+1][x]=Math.abs(l)>Math.abs(A)?(-k-f*c)/l:(-R-d*c)/A),c=Math.abs(n[s][x]),b*c*c>1)for(o=s;o<=x;o++)n[o][x]=n[o][x]/c}else if(T<0)for(u=x-1,Math.abs(n[x][x-1])>Math.abs(n[x-1][x])?(n[x-1][x-1]=T/n[x][x-1],n[x-1][x]=-(n[x][x]-S)/n[x][x-1]):(w=O(0,-n[x-1][x],n[x-1][x-1]-S,T),n[x-1][x-1]=w[0],n[x-1][x]=w[1]),n[x][x-1]=0,n[x][x]=1,s=x-2;s>=0;s--){for(v=0,g=0,o=u;o<=x;o++)v+=n[s][o]*n[o][x-1],g+=n[s][o]*n[o][x];if(f=n[s][s]-S,e[s]<0)A=f,k=v,R=g;else if(u=s,0===e[s]?(w=O(-v,-g,f,T),n[s][x-1]=w[0],n[s][x]=w[1]):(l=n[s][s+1],d=n[s+1][s],p=(r[s]-S)*(r[s]-S)+e[s]*e[s]-T*T,m=2*(r[s]-S)*T,0===p&&0===m&&(p=b*E*(Math.abs(f)+Math.abs(T)+Math.abs(l)+Math.abs(d)+Math.abs(A))),w=O(l*k-A*v+T*g,l*R-A*g-T*v,p,m),n[s][x-1]=w[0],n[s][x]=w[1],Math.abs(l)>Math.abs(A)+Math.abs(T)?(n[s+1][x-1]=(-v-f*n[s][x-1]+T*n[s][x])/l,n[s+1][x]=(-g-f*n[s][x]-T*n[s][x-1])/l):(w=O(-k-d*n[s][x-1],-R-d*n[s][x],A,T),n[s+1][x-1]=w[0],n[s+1][x]=w[1])),c=Math.max(Math.abs(n[s][x-1]),Math.abs(n[s][x])),b*c*c>1)for(o=s;o<=x;o++)n[o][x-1]=n[o][x-1]/c,n[o][x]=n[o][x]/c}for(s=0;s<t;s++)if(s<0||s>_)for(o=s;o<t;o++)i[s][o]=n[s][o];for(o=t-1;o>=0;o--)for(s=0;s<=_;s++){for(A=0,a=0;a<=Math.min(o,_);a++)A+=i[s][a]*n[a][o];i[s][o]=A}}(s,c,h,u,l)}this.n=s,this.e=c,this.d=h,this.V=u}get realEigenvalues(){return this.d}get imaginaryEigenvalues(){return this.e}get eigenvectorMatrix(){return P.isMatrix(this.V)||(this.V=new P(this.V)),this.V}get diagonalMatrix(){var t,e,r=this.n,i=this.e,n=this.d,s=new P(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)s[t][e]=0;s[t][t]=n[t],i[t]>0?s[t][t+1]=i[t]:i[t]<0&&(s[t][t-1]=i[t])}return s}}function O(t,e,r,i){var n,s;return Math.abs(r)>Math.abs(i)?[(t+(n=i/r)*e)/(s=r+n*i),(e-n*t)/s]:[((n=r/i)*t+e)/(s=i+n*r),(n*e-t)/s]}class V{constructor(t){if(!(t=C.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");var e,r,i,n=t,s=n.rows,o=new P(s,s),a=!0;for(r=0;r<s;r++){var u=o[r],h=0;for(i=0;i<r;i++){var c=o[i],f=0;for(e=0;e<i;e++)f+=c[e]*u[e];u[i]=f=(n.get(r,i)-f)/o[i][i],h+=f*f}for(a&=(h=n.get(r,r)-h)>0,o[r][r]=Math.sqrt(Math.max(h,0)),i=r+1;i<s;i++)o[r][i]=0}if(!a)throw new Error("Matrix is not positive definite");this.L=o}solve(t){t=C.checkMatrix(t);var e=this.L,r=e.rows;if(t.rows!==r)throw new Error("Matrix dimensions do not match");var i,n,s,o=t.columns,a=t.clone();for(s=0;s<r;s++)for(n=0;n<o;n++){for(i=0;i<s;i++)a[s][n]-=a[i][n]*e[s][i];a[s][n]/=e[s][s]}for(s=r-1;s>=0;s--)for(n=0;n<o;n++){for(i=s+1;i<r;i++)a[s][n]-=a[i][n]*e[i][s];a[s][n]/=e[s][s]}return a}get lowerTriangularMatrix(){return this.L}}e.default=P,e.Matrix=P,e.abstractMatrix=A,e.wrap=function(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new C(t):new z(t,e);throw new Error("the argument is not an array")},e.WrapperMatrix2D=C,e.WrapperMatrix1D=z,e.solve=N,e.inverse=function(t,e=!1){return t=C.checkMatrix(t),e?new u(t).inverse():N(t,P.eye(t.rows))},e.SingularValueDecomposition=u,e.SVD=u,e.EigenvalueDecomposition=B,e.EVD=B,e.CholeskyDecomposition=V,e.CHO=V,e.LuDecomposition=s,e.LU=s,e.QrDecomposition=F,e.QR=F},function(t,e,r){"use strict";function i(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var n=i(r(22)),s=i(r(23));t.exports=function(t,e={}){if(!Array.isArray(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");let r;if(void 0!==e.output){if(!Array.isArray(e.output))throw new TypeError("output option must be an array if specified");r=e.output}else r=new Array(t.length);const i=s(t),o=n(t);if(i===o)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");const{min:a=(e.autoMinMax?i:0),max:u=(e.autoMinMax?o:1)}=e;if(a>=u)throw new RangeError("min option must be smaller than max option");const h=(u-a)/(o-i);for(var c=0;c<t.length;c++)r[c]=(t[c]-i)*h+a;return r}},function(t,e){"use strict";t.exports=function(t){if(!Array.isArray(t))throw new Error("input must be an array");if(0===t.length)throw new Error("input must not be empty");for(var e=t[0],r=1;r<t.length;r++)t[r]>e&&(e=t[r]);return e}},function(t,e){"use strict";t.exports=function(t){if(!Array.isArray(t))throw new Error("input must be an array");if(0===t.length)throw new Error("input must not be empty");for(var e=t[0],r=1;r<t.length;r++)t[r]<e&&(e=t[r]);return e}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this._epsilon=1e-8,this._MAX_ITTERATIONS=100,this._num_elements=e.length,this._dims=2}return i(t,[{key:"apply",value:function(){for(var t=(0,n.create2dArray)(this._nodes.length,this._nodes.length),e=0;e<this._edges.length;++e){var r=this._edges[e].source.index,i=this._edges[e].target.index;t[r][i]=1}var s=function(t){for(var e=h(t.length),r=0;r<t.length;r++){for(var i=0,n=0;n<t[r].length;n++)i+=t[r][n];e[r]=i+1}return e}(t),f=this._dims+1,l=new Array(f);l[0]=a(function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=1;return e}(this._num_elements));for(var d=1;d<f;d++)l[d]=h(this._num_elements);for(var v=1;v<f;v++){for(var g=a(u(this._num_elements)),p=0,m=!1;!m;){for(var y=g.slice(),w=0;w<v;w++){for(var x=l[w],_=0,b=0,M=0;M<y.length;M++)_+=y[M]*s[M]*x[M],b+=x[M]*s[M]*x[M];for(var E=_/b,S=0;S<y.length;S++)y[S]=y[S]-E*x[S]}for(var T=0;T<g.length;T++)g[T]=.5*(y[T]+o(t[T],y)/s[T]);m=(p+=1)>100|!(o(g=a(g),y)<1-this._epsilon)}l[v]=g.slice()}var k=c(l[1]),R=c(l[2]);this._nodes.forEach(function(t,e){t.x=k[e],t.y=R[e]})}}]),t}();function o(t,e){for(var r=0,i=0;i<t.length;i++)r+=t[i]*e[i];return r}function a(t){for(var e=function(t){for(var e=0,r=0;r<t.length;r++)e+=Math.pow(t[r],2);return Math.sqrt(e)}(t),r=new Array(t.length),i=0;i<t.length;i++)r[i]=t[i]/e;return r}function u(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=Math.random();return e}function h(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e}function c(t){for(var e=Math.max.apply(null,t.map(Math.abs)),r=Math.min.apply(null,t),i=0;i<t.length;++i)t[i]=.1+(t[i]-r)/(1.25*(e-r));return t}e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this._margin=.05,this._radius=.05,this._nlines=5}return i(t,[{key:"apply",value:function(){for(var t=(0,n.degrees)(this._nodes,this._edges),e=this._nodes.length/this._nlines,r=(.5-(this._margin+this._radius))/e,i=2*Math.PI/this._nlines,s=0,o=0;o<this._nodes.length;++o){var a=t.nodes[o].index;this._nodes[a].x=.5+(this._radius+r*(o-s*e))*Math.cos(i*s+Math.PI/2),this._nodes[a].y=.5+(this._radius+r*(o-s*e))*Math.sin(i*s+Math.PI/2),s=Math.floor(o/e)}}}]),t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this._margin=.05}return i(t,[{key:"apply",value:function(){var t=(0,n.degrees)(this._nodes,this._edges),e=Math.sqrt(this._nodes.length);if(e-Math.floor(e)>0)var r=Math.floor(e)+1;else r=e;var i=(1-2*this._margin)/r,s=this._nodes.length/r;if(s-Math.floor(s)>0)var o=Math.floor(s)+1;else o=s;for(var a=(1-2*this._margin)/(o-2),u=0;u<this._nodes.length;++u){var h=Math.floor(u/(r+1));this._nodes[t.nodes[u].index].x=this._margin+i*(u-h*(r+1)),this._nodes[t.nodes[u].index].y=this._margin+a*h,this._nodes[t.nodes[u].index].weight=t.degrees[u]}}}]),t}();e.default=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=r(14);var s=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._nodes=e,this._edges=r,this._margin=.05,this._hubs=.1,this._intermediary=.2}return i(t,[{key:"apply",value:function(){for(var t=(0,n.degrees)(this._nodes,this._edges),e=Math.floor(this._nodes.length*(this._hubs+this._intermediary)),r=Math.floor(this._nodes.length*this._hubs),i=(1-2*this._margin)/2/(r-1),s=Math.PI/(r-1),o=0;o<r;)this._nodes[t.nodes[o].index].x=this._margin+i*o,this._nodes[t.nodes[o].index].y=this._margin+.4+.4*Math.sin(o*s),++o;var a=e-r,u=Math.PI/a,h=(1-2*this._margin)/2/a;for(o=0;o<a;)this._nodes[t.nodes[o+r].index].x=.5+h*(o+1),this._nodes[t.nodes[o+r].index].y=this._margin+.4+.4*Math.sin(Math.PI+(o+1)*u),++o;var c=[.85,.75],f=[.4,1-this._margin],l=this._nodes.length-e,d=(f[0]-c[0])/(l-1),v=(f[1]-c[1])/(l-1);for(o=0;o<l;)this._nodes[t.nodes[o+e].index].x=c[0]+d*o,this._nodes[t.nodes[o+e].index].y=c[1]+v*o,++o}}]),t}();e.default=s},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,null,[{key:"edgeSource",value:function(t){if(t.source.source){var e=this.edgeSource(t.source),r=this.edgeTarget(t.source);return{x:(e.x+r.x)/2,y:(e.y+r.y)/2,uniqid:t.uniqid,index:t.index,is_edge:!0,e:t.source}}return t.source}},{key:"edgeTarget",value:function(t){if(t.target.source){var e=this.edgeSource(t.target),r=this.edgeTarget(t.target);return{x:(e.x+r.x)/2,y:(e.y+r.y)/2,uniqid:t.uniqid,index:t.index,is_edge:!0,e:t.target}}return t.target}},{key:"getCurveShift",value:function(t,e){if((e=e||{}).x=e.y=e.cx=e.cy=0,!t)return e;if(t.t&&t.t>=1)if(t.t>=2){var r=this.edgeSource(t).y<.5?1:-1;e.cx=1.25*r,e.cy=0}else{var i=this.edgeSource(t),n=this.edgeTarget(t);e.x=i.x-n.x,e.y=i.y-n.y}return e}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=u(r(30)),s=u(r(28)),o=(u(r(7)),r(8)),a=r(31);function u(t){return t&&t.__esModule?t:{default:t}}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var c={};function f(t,e,r,i){s.default.getCurveShift(r,i);var n,o,u=void 0,h=void 0;u=-i.y,h=i.x*t.aspect2;var c=u*t.width*u*t.width+h*t.height*h*t.height;if((0,a.eq)(c,0))u=0,h=0;else{var f=Math.sqrt(c);u*=.25*t.curveExc*e/f,h*=.25*t.curveExc*e/f}var l=2.5*t.nodeSize*e/t.width,d=2.5*t.nodeSize*e/t.height;n=.5*-i.cy*l,o=.5*i.cx*d,i.x=u+n,i.y=h+o}var l=function(){function t(e){h(this,t),this.e=e}return i(t,[{key:"getBBox",value:function(){return[this.e.x-a.EPS,this.e.y-a.EPS,this.e.x+a.EPS,this.e.y+a.EPS]}},{key:"intersectsRect",value:function(t,e,r,i){return(0,a.pointInRect)(this.e.x,this.e.y,t,e,r,i)}},{key:"dist2",value:function(t,e,r){return(0,a.distance2)(t,e,this.e.x,this.e.y)}},{key:"isNode",get:function(){return!0}}]),t}(),d=function(){function t(e,r,i,n,s,o){h(this,t),this.e=e,this.pos=r,this.style=i,this.fontSize=n,this.isSDF=s,this.getLabelSize=o}return i(t,[{key:"getTextPos",value:function(t,e){var r=this.e.x,i=this.e.y,n=void 0,s=void 0,o=void 0,a=void 0;n=o=r,s=a=i;var u=this.isSDF?this.getLabelSize(t,this.style.label||{}):this.fontSize,h=u/this.fontSize;0===u&&(h=0);var c=.5*t.nodeSize,f=[10,10,-10,-10];return this.pos.forEach(function(u){var l=(2*function(t,e){return e<t?0:1}(i,.5)-1)*c;n=r+e*(u.dx*h)/t.width/2,s=i+e*(u.dy*h+l)/t.height/2,o=r+e*((u.dx+u.width)*h)/t.width/2,a=i+e*((u.dy+u.height)*h+l)/t.height/2,f[0]=Math.min(n,f[0]),f[1]=Math.min(s,f[1]),f[2]=Math.max(o,f[2]),f[3]=Math.max(a,f[3])}),f}},{key:"getBBox",value:function(t){var e=this.getTextPos(t,1);return e[0]=Math.min(e[0],this.e.x),e[1]=Math.min(e[1],this.e.y),e[2]=Math.max(e[2],this.e.x),e[3]=Math.max(e[3],this.e.y),e}},{key:"intersectsRect",value:function(t,e,r,i,n,s){var o=this.getTextPos(n,s);return(0,a.rectIntersectsRect)(t,e,r,i,o[0],o[1],o[2],o[3])}},{key:"dist2",value:function(t,e,r,i){var n=this.getTextPos(r,i);return(0,a.pointInRect)(t,e,n[0],n[1],n[2],n[3])?0:Math.min((0,a.distance2)(n[0],n[1]),(0,a.distance2)(n[2],n[3]),(0,a.distance2)(n[0],n[3]),(0,a.distance2)(n[2],n[1]),(0,a.pDistance2)(t,e,n[0],n[1],n[2],n[1]),(0,a.pDistance2)(t,e,n[0],n[3],n[2],n[3]),(0,a.pDistance2)(t,e,n[0],n[1],n[0],n[3]),(0,a.pDistance2)(t,e,n[2],n[1],n[2],n[3]))}},{key:"isLabel",get:function(){return!0}}]),t}(),v=function(){function t(e){h(this,t),this.e=e}return i(t,[{key:"getPoints",value:function(t,e){var r=void 0,i=void 0,n=void 0,o=void 0,a=s.default.edgeSource(this.e),u=s.default.edgeTarget(this.e);return r=a.x,i=a.y,n=u.x,o=u.y,f(t,e,a.e,c),r+=c.x,i+=c.y,f(t,e,u.e,c),[r,i,n+=c.x,o+=c.y]}},{key:"getBBox",value:function(t,e){var r=this.getPoints(t,e);return[Math.min(r[0],r[2]),Math.min(r[1],r[3]),Math.max(r[0],r[2]),Math.max(r[1],r[3])]}},{key:"intersectsRect",value:function(t,e,r,i,n,s){var o=this.getPoints(n,s);return(0,a.lineIntersectsRect)(o[0],o[1],o[2],o[3],t,e,r,i)}},{key:"dist2",value:function(t,e,r,i){var n=this.getPoints(r,i);return(0,a.pDistance2)(t,e,n[0],n[1],n[2],n[3])}},{key:"isEdge",get:function(){return!0}}]),t}(),g=function(){function t(e){h(this,t),this.e=e}return i(t,[{key:"getBezierPoints",value:function(t,e){var r,i=void 0,n=void 0;i=(r=s.default.edgeSource(this.e)).x,n=r.y;var o=2.5*t.nodeSize*e,a=o/t.width/2,u=o/t.height/2,h=r.y<.5?1:-1;return f(t,e,r.e,c),[i+=c.x,n+=c.y,i+1*a,n+u*h,i,n+1.25*u*h,i-1*a,n+u*h]}},{key:"getBBox",value:function(t,e){var r=this.getBezierPoints(t,e);return(0,a.getBBFromPoints)(r)}},{key:"intersectsRect",value:function(t,e,r,i,n,s,o){var u=this.getBezierPoints(n,s);return(0,a.bezierIntersectsRect)(u[0],u[1],u[2],u[3],u[4],u[5],t,e,r,i)||(0,a.bezierIntersectsRect)(u[2],u[3],u[4],u[5],u[6],u[7],t,e,r,i)}},{key:"dist2",value:function(t,e,r,i){var n=this.getBezierPoints(r,i),s=(0,a.distance2ToBezier)(t,e,n[0],n[1],n[2],n[3],n[4],n[5]),o=(0,a.distance2ToBezier)(t,e,n[2],n[3],n[4],n[5],n[6],n[7]);return Math.min(s,o)}},{key:"isEdge",get:function(){return!0}}]),t}(),p=function(){function t(e){h(this,t),this.e=e}return i(t,[{key:"getBezierPoints",value:function(t,e,r){var i=void 0,n=void 0,o=void 0,a=void 0,u=s.default.edgeSource(this.e),h=s.default.edgeTarget(this.e);i=u.x,o=u.y,n=h.x,a=h.y;var l=r(u,h),d=l.y,v=t.aspect2*-l.x,g=t.width*d,p=t.height*v,m=2*Math.sqrt(g*g+p*p);return d*=t.curveExc*e/m,v*=t.curveExc*e/m,f(t,e,u.e,c),i+=c.x,o+=c.y,f(t,e,h.e,c),[i,o,(i+(n+=c.x))/2+d,(o+(a+=c.y))/2+v,n,a]}},{key:"intersectsRect",value:function(t,e,r,i,n,s,o){var u=this.getBezierPoints(n,s,o);return(0,a.bezierIntersectsRect)(u[0],u[1],u[2],u[3],u[4],u[5],t,e,r,i)}},{key:"getBBox",value:function(t,e,r){var i=this.getBezierPoints(t,e,r);return(0,a.getBBFromPoints)(i)}},{key:"dist2",value:function(t,e,r,i,n){var s=this.getBezierPoints(r,i,n);return(0,a.distance2ToBezier)(t,e,s[0],s[1],s[2],s[3],s[4],s[5])}},{key:"isEdge",get:function(){return!0}}]),t}();function m(t,e){return t.dist2-e.dist2}var y={nodes:l,lines:v,circles:g,curves:p,labels:d},w=function(){function t(e,r,i,s,a,u,c,f,m,y,w,x,_,b,M){h(this,t);var E=e.size||1;e.size=1,this.texts=r,this.normalize=x;var S=this.types={nodes:[],lines:[],circles:[],curves:[],labels:[]},T=0,k=[],R=function(t,r,i){return r[i]=t.getBBox(e,1,x),r[i].push(t),t};s.forEach(function(t){S.nodes.push(R(new l(t),k,T++))}),u.forEach(function(t){S.lines.push(R(new v(t),k,T++))}),y.forEach(function(t){S.circles.push(R(new g(t),k,T++))}),f.forEach(function(t){S.curves.push(R(new p(t),k,T++))});var A={},P={},z=function(t){var n=a[t],s=(0,o.getPartitionStyle)(i.styles[t],_,"label"),u=r.getEngine(s.font);u.setFont(s.font);var h=u.fontSize,c=u.isSDF,f=A[t]||(A[t]=[]),l=P[t]||(P[t]=0);e.size=M(e,s.label||{}),n.forEach(function(t){var e=u.get(t.label,t.x,t.y);S.labels.push(R(new d(t,e,s,h,c,b),f,l++))}),P[t]=l};for(var C in a)z(C);for(var C in this.rbushtree_s={},A){(this.rbushtree_s[C]=(0,n.default)()).load(A[C])}this.rbushtree=(0,n.default)(),this.rbushtree.load(k),e.size=E}return i(t,[{key:"_tryAddEl",value:function(t,e,r,i,n,s){i&&e.isNode&&t.nodes.push({node:e.e,dist:Math.sqrt(r),dist2:r}),n&&e.isEdge&&t.edges.push({edge:e.e,dist:Math.sqrt(r),dist2:r}),s&&e.isLabel&&t.labels.push({label:e.e,dist:Math.sqrt(r),dist2:r})}},{key:"findArea",value:function(t,e,r,i,n,s,o,u,h){if(e>i){var c=e;e=i,i=c}if(r>n){var f=r;r=n,n=f}var l={};u&&(l.edges=[]),o&&(l.nodes=[]),h&&(l.labels=[]);var d=(e+i)/2,v=(r+n)/2,g=this.rbushtree.search([e-a.EPS,r-a.EPS,i+a.EPS,n+a.EPS]);if(h)for(var p in this.rbushtree_s)g=g.concat(this.rbushtree_s[p].search([e-a.EPS,r-a.EPS,i+a.EPS,n+a.EPS]));for(var y=0;y<g.length;y++){var w=g[y][4],x=w.dist2(d,v,t,s,this.normalize,this.texts);w.intersectsRect(e,r,i,n,t,s,this.normalize,this.texts)&&this._tryAddEl(l,w,x,o,u,h)}for(var _ in l)l[_].sort(m);return l}},{key:"find",value:function(t,e,r,i,n,s,o,a){var u={};o&&(u.edges=[]),s&&(u.nodes=[]),a&&(u.labels=[]);var h=i,c=i,f=i*i,l=this.rbushtree.search([e-h,r-c,e+h,r+c]);if(a)for(var d in this.rbushtree_s)l=l.concat(this.rbushtree_s[d].search([e-h,r-c,e+h,r+c]));for(var v=0;v<l.length;v++){var g=l[v][4],p=g.dist2(e,r,t,n,this.normalize,this.texts);p>f||this._tryAddEl(u,g,p,s,o,a)}for(var y in u)u[y].sort(m);return u}},{key:"update",value:function(t,e,r,i){this.rbushtree.remove(this.types[e][r]);var n=new y[e](i),s=n.getBBox(t,1,this.normalize,this.texts);s.push(n),this.rbushtree.insert(this.types[e][r]=s)}}]),t}();e.default=w},function(t,e){"use strict";function r(t,e){if(!(this instanceof r))return new r(t,e);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),e&&this._initFormat(e),this.clear()}function i(t,e){t.bbox=n(t,0,t.children.length,e)}function n(t,e,r,i){for(var n,a=s(),u=e;u<r;u++)n=t.children[u],o(a,t.leaf?i(n):n.bbox);return a}function s(){return[1/0,1/0,-1/0,-1/0]}function o(t,e){return t[0]=Math.min(t[0],e[0]),t[1]=Math.min(t[1],e[1]),t[2]=Math.max(t[2],e[2]),t[3]=Math.max(t[3],e[3]),t}function a(t,e){return t.bbox[0]-e.bbox[0]}function u(t,e){return t.bbox[1]-e.bbox[1]}function h(t){return(t[2]-t[0])*(t[3]-t[1])}function c(t){return t[2]-t[0]+(t[3]-t[1])}function f(t,e){return t[0]<=e[0]&&t[1]<=e[1]&&e[2]<=t[2]&&e[3]<=t[3]}function l(t,e){return e[0]<=t[2]&&e[1]<=t[3]&&e[2]>=t[0]&&e[3]>=t[1]}function d(t,e,r,i,n){for(var s,o=[e,r];o.length;)(r=o.pop())-(e=o.pop())<=i||(v(t,e,r,s=e+Math.ceil((r-e)/i/2)*i,n),o.push(e,s,s,r))}function v(t,e,r,i,n){for(var s,o,a,u,h,c,f;r>e;){for(r-e>600&&(s=r-e+1,o=i-e+1,a=Math.log(s),u=.5*Math.exp(2*a/3),h=.5*Math.sqrt(a*u*(s-u)/s)*(o-s/2<0?-1:1),v(t,Math.max(e,Math.floor(i-o*u/s+h)),Math.min(r,Math.floor(i+(s-o)*u/s+h)),i,n)),c=t[i],o=e,f=r,g(t,e,i),n(t[r],c)>0&&g(t,e,r);o<f;){for(g(t,o,f),o++,f--;n(t[o],c)<0;)o++;for(;n(t[f],c)>0;)f--}0===n(t[e],c)?g(t,e,f):g(t,++f,r),f<=i&&(e=f+1),i<=f&&(r=f-1)}}function g(t,e,r){var i=t[e];t[e]=t[r],t[r]=i}Object.defineProperty(e,"__esModule",{value:!0}),r.prototype={all:function(){return this._all(this.data,[])},search:function(t){var e=this.data,r=[],i=this.toBBox;if(!l(t,e.bbox))return r;for(var n,s,o,a,u=[];e;){for(n=0,s=e.children.length;n<s;n++)o=e.children[n],l(t,a=e.leaf?i(o):o.bbox)&&(e.leaf?r.push(o):f(t,a)?this._all(o,r):u.push(o));e=u.pop()}return r},collides:function(t){var e=this.data,r=this.toBBox;if(!l(t,e.bbox))return!1;for(var i,n,s,o,a=[];e;){for(i=0,n=e.children.length;i<n;i++)if(s=e.children[i],l(t,o=e.leaf?r(s):s.bbox)){if(e.leaf||f(t,o))return!0;a.push(s)}e=a.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0,r=t.length;e<r;e++)this.insert(t[e]);return this}var i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){var n=this.data;this.data=i,i=n}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data={children:[],height:1,bbox:s(),leaf:!0},this},remove:function(t){if(!t)return this;for(var e,r,i,n,s=this.data,o=this.toBBox(t),a=[],u=[];s||a.length;){if(s||(s=a.pop(),r=a[a.length-1],e=u.pop(),n=!0),s.leaf&&-1!==(i=s.children.indexOf(t)))return s.children.splice(i,1),a.push(s),this._condense(a),this;n||s.leaf||!f(s.bbox,o)?r?(e++,s=r.children[e],n=!1):s=null:(a.push(s),u.push(e),e=0,r=s,s=s.children[0])}return this},toBBox:function(t){return t},compareMinX:function(t,e){return t[0]-e[0]},compareMinY:function(t,e){return t[1]-e[1]},toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,e){for(var r=[];t;)t.leaf?e.push.apply(e,t.children):r.push.apply(r,t.children),t=r.pop();return e},_build:function(t,e,r,n){var s,o=r-e+1,a=this._maxEntries;if(o<=a)return i(s={children:t.slice(e,r+1),height:1,bbox:null,leaf:!0},this.toBBox),s;n||(n=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,n-1))),s={children:[],height:n,bbox:null,leaf:!1};var u,h,c,f,l=Math.ceil(o/a),v=l*Math.ceil(Math.sqrt(a));for(d(t,e,r,v,this.compareMinX),u=e;u<=r;u+=v)for(d(t,u,c=Math.min(u+v-1,r),l,this.compareMinY),h=u;h<=c;h+=l)f=Math.min(h+l-1,c),s.children.push(this._build(t,h,f,n-1));return i(s,this.toBBox),s},_chooseSubtree:function(t,e,r,i){for(var n,s,o,a,u,c,f,l,d,v;i.push(e),!e.leaf&&i.length-1!==r;){for(f=l=1/0,n=0,s=e.children.length;n<s;n++)u=h((o=e.children[n]).bbox),d=t,v=o.bbox,(c=(Math.max(v[2],d[2])-Math.min(v[0],d[0]))*(Math.max(v[3],d[3])-Math.min(v[1],d[1]))-u)<l?(l=c,f=u<f?u:f,a=o):c===l&&u<f&&(f=u,a=o);e=a||e.children[0]}return e},_insert:function(t,e,r){var i=this.toBBox,n=r?t.bbox:i(t),s=[],a=this._chooseSubtree(n,this.data,e,s);for(a.children.push(t),o(a.bbox,n);e>=0&&s[e].children.length>this._maxEntries;)this._split(s,e),e--;this._adjustParentBBoxes(n,s,e)},_split:function(t,e){var r=t[e],n=r.children.length,s=this._minEntries;this._chooseSplitAxis(r,s,n);var o=this._chooseSplitIndex(r,s,n),a={children:r.children.splice(o,r.children.length-o),height:r.height,bbox:null,leaf:!1};r.leaf&&(a.leaf=!0),i(r,this.toBBox),i(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(r,a)},_splitRoot:function(t,e){this.data={children:[t,e],height:t.height+1,bbox:null,leaf:!1},i(this.data,this.toBBox)},_chooseSplitIndex:function(t,e,r){var i,s,o,a,u,c,f,l,d,v,g,p,m,y;for(c=f=1/0,i=e;i<=r-e;i++)s=n(t,0,i,this.toBBox),o=n(t,i,r,this.toBBox),d=s,v=o,g=void 0,p=void 0,m=void 0,y=void 0,g=Math.max(d[0],v[0]),p=Math.max(d[1],v[1]),m=Math.min(d[2],v[2]),y=Math.min(d[3],v[3]),a=Math.max(0,m-g)*Math.max(0,y-p),u=h(s)+h(o),a<c?(c=a,l=i,f=u<f?u:f):a===c&&u<f&&(f=u,l=i);return l},_chooseSplitAxis:function(t,e,r){var i=t.leaf?this.compareMinX:a,n=t.leaf?this.compareMinY:u;this._allDistMargin(t,e,r,i)<this._allDistMargin(t,e,r,n)&&t.children.sort(i)},_allDistMargin:function(t,e,r,i){t.children.sort(i);var s,a,u=this.toBBox,h=n(t,0,e,u),f=n(t,r-e,r,u),l=c(h)+c(f);for(s=e;s<r-e;s++)a=t.children[s],o(h,t.leaf?u(a):a.bbox),l+=c(h);for(s=r-e-1;s>=e;s--)a=t.children[s],o(f,t.leaf?u(a):a.bbox),l+=c(f);return l},_adjustParentBBoxes:function(t,e,r){for(var i=r;i>=0;i--)o(e[i].bbox,t)},_condense:function(t){for(var e,r=t.length-1;r>=0;r--)0===t[r].children.length?r>0?(e=t[r-1].children).splice(e.indexOf(t[r]),1):this.clear():i(t[r],this.toBBox)},_initFormat:function(t){var e=["return a"," - b",";"];this.compareMinX=new Function("a","b",e.join(t[0])),this.compareMinY=new Function("a","b",e.join(t[1])),this.toBBox=new Function("a","return [a"+t.join(", a")+"];")}},e.default=r},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.neq=e.eq=e.getBBFromPoints=e.pDistance2=e.distance2=e.distance2ToBezier=e.pointInRect=e.rectIntersectsRect=e.lineIntersectsRect=e.bezierIntersectsLine=e.bezierIntersectsRect=e.EPS=void 0;i(r(30)),i(r(28)),r(8);function i(t){return t&&t.__esModule?t:{default:t}}var n=Number.EPSILON||1e-14;function s(t){var e=Math.pow(Math.abs(t),1/3);return t<0?-e:e}function o(t,e,r,i,n,o,u,h){for(var c=function(t,e,r,i){if(Math.abs(t)<1e-8){if(t=e,e=r,r=i,Math.abs(t)<1e-8)return t=e,e=r,Math.abs(t)<1e-8?[]:[-e/t];var n=e*e-4*t*r;return Math.abs(n)<1e-8?[-e/(2*t)]:n>0?[(-e+Math.sqrt(n))/(2*t),(-e-Math.sqrt(n))/(2*t)]:[]}var o=(3*t*r-e*e)/(3*t*t),a=(2*e*e*e-9*t*e*r+27*t*t*i)/(27*t*t*t),u=void 0;if(Math.abs(o)<1e-8)u=[s(-a)];else if(Math.abs(a)<1e-8)u=[0].concat(o<0?[Math.sqrt(-o),-Math.sqrt(-o)]:[]);else{var h=a*a/4+o*o*o/27;if(Math.abs(h)<1e-8)u=[-1.5*a/o,3*a/o];else if(h>0){var c=s(-a/2-Math.sqrt(h));u=[c-o/(3*c)]}else{var f=2*Math.sqrt(-o/3),l=Math.acos(3*a/o/f)/3,d=2*Math.PI/3;u=[f*Math.cos(l),f*Math.cos(l-d),f*Math.cos(l-2*d)]}}for(var v=0;v<u.length;v++)u[v]-=e/(3*t);return u}(4*r*r-16*r*n+8*r*u+16*n*n-16*n*u+4*u*u+4*i*i-16*i*o+8*i*h+16*o*o-16*o*h+4*h*h,-12*r*r+36*r*n-12*r*u-24*n*n+12*n*u-12*i*i+36*i*o-12*i*h-24*o*o+12*o*h,12*r*r-24*r*n+4*r*u-4*r*t+8*n*n+8*n*t-4*u*t+12*i*i-24*i*o+4*i*h-4*i*e+8*o*o+8*o*e-4*h*e,-4*r*r+4*r*n+4*r*t-4*n*t-4*i*i+4*i*o+4*i*e-4*o*e),f=1/0,l=0;l<c.length;l++){var d=c[l];if(!(d<0||d>1)){var v=a(t,e,r*(1-d)*(1-d)+2*n*d*(1-d)+u*d*d,i*(1-d)*(1-d)+2*o*d*(1-d)+h*d*d);v<f&&(f=v)}}return f}function a(t,e,r,i){var n=t-r,s=e-i;return n*n+s*s}function u(t,e,r,i,n,s,o,a){var u=(e-s)*(o-n)-(t-n)*(a-s),h=(r-t)*(a-s)-(i-e)*(o-n);if(0==h)return!1;var c=u/h,f=(u=(e-s)*(r-t)-(t-n)*(i-e))/h;return!(c<0||c>1||f<0||f>1)}function h(t,e,r,i,s,o){return t>=r-n&&t<=s+n&&e>=i-n&&e<=o+n}function c(t,e){return t>=e-n&&t<=e+n}function f(t,e){return!c(t,e)}function l(t,e,r,i,n,s,o,a,u,h,c){if(o<0||o>1)return!1;if(f(c-u,0)){var l=(e*(1-o)*(1-o)+2*i*o*(1-o)+s*o*o)/(c-u);if(l<0||l>1)return!1}return!0}function d(t,e,r,i,n,s,o,a,u,h){var d=void 0,v=-t*a+t*h+2*r*a-2*r*h-n*a+n*h+e*o-e*u-2*i*o+2*i*u+s*o-s*u;if(f(v,0)&&f(o-u,0)){var g=2*t*a-2*t*h-2*r*a+2*r*h-2*e*u+2*i*o-2*i*u,p=g*g-4*(-t*a+t*h+e*o-e*u-o*h+u*a)*(-t*a+t*h+2*r*a-2*r*h-n*a+n*h+e*o-e*u-2*i*o+2*i*u+s*o-s*u);if(p>=0){var m=t*a-t*h-r*a+r*h-e*o+e*u+i*o-i*u;if(l(0,e,0,i,0,s,o,0,u,0,d=(m-.5*Math.sqrt(p))/v))return!0;if(l(0,e,0,i,0,s,o,0,u,0,d=(m+.5*Math.sqrt(p))/v))return!0}}if(v=-r*a+r*h+n*a-n*h+i*o-i*u-s*o+s*u,c(e,2*i-s)&&c(t,2*r-n)&&f(v,0)&&f(o*a-o*h-u*a+u*h,0)&&(d=-2*r*a+2*r*h+n*a-n*h+2*i*o-2*i*u-s*o+s*u-o*h+u*a,l(0,e,0,i,0,s,o,0,u,0,d/=2*v)))return!0;if(c(a,h)&&c(e,2*i-s)&&f(i-s,0)&&f(o-u,0)&&l(0,e,0,i,0,s,o,0,u,0,d=(2*i-s-h)/(2*(i-s))))return!0;var y=r*e*a-r*e*h-2*r*i*a+2*r*i*h+r*s*a-r*s*h-n*e*a+n*e*h+2*n*i*a-2*n*i*h-n*s*a+n*s*h-e*i*o+e*i*u+e*s*o-e*s*u+2*i*i*o-2*i*i*u-3*i*s*o+3*i*s*u+s*s*o-s*s*u;return!!(c(t,(2*r*a-2*r*h-n*a+n*h+e*o-e*u-2*i*o+2*i*u+s*o-s*u)/(a-h))&&f(y,0)&&f(o-u,0)&&l(0,e,0,i,0,s,o,0,u,0,d=(2*r*a-2*r*h-n*a+n*h-2*i*o+2*i*u+s*o-s*u+o*h-u*a)/(2*(r*a-r*h-n*a+n*h-i*o+i*u+s*o-s*u))))}e.EPS=n,e.bezierIntersectsRect=function(t,e,r,i,n,s,a,u,c,f){if(h(t,e,a,u,c,f)||h(n,s,a,u,c,f))return!0;var l=a-c,v=u-f,g=l*l+v*v,p=o((a+c)/2,(u+f)/2,t,e,r,i,n,s);return!(4*p>g)&&(4*p<=Math.min(l*l,v*v)||d(t,e,r,i,n,s,u,c,u,u)||d(t,e,r,i,n,s,c,u,c,f)||d(t,e,r,i,n,s,c,f,a,f)||d(t,e,r,i,n,s,a,f,a,u))},e.bezierIntersectsLine=d,e.lineIntersectsRect=function(t,e,r,i,n,s,o,a){return!(!h(t,e,n,s,o,a)&&!h(r,i,n,s,o,a))||u(t,e,r,i,n,s,o,s)||u(t,e,r,i,o,s,o,a)||u(t,e,r,i,o,a,n,a)||u(t,e,r,i,n,a,n,s)},e.rectIntersectsRect=function(t,e,r,i,n,s,o,a){return t<=o&&e<=a&&r>=n&&i>=s},e.pointInRect=h,e.distance2ToBezier=o,e.distance2=a,e.pDistance2=function(t,e,r,i,n,s){var o=n-r,u=s-i,h=o*o+u*u,c=-1;0!=h&&(c=((t-r)*o+(e-i)*u)/h);var f=void 0,l=void 0;return c<0?(f=r,l=i):c>1?(f=n,l=s):(f=r+c*o,l=i+c*u),a(t,e,f,l)},e.getBBFromPoints=function(t){for(var e=1/0,r=-e,i=1/0,n=-i,s=0;s<t.length;s+=2){var o=t[s];o<e&&(e=o),o>r&&(r=o)}for(var a=1;a<t.length;a+=2){var u=t[a];u<i&&(i=u),u>n&&(n=u)}return[e,i,r,n]},e.eq=c,e.neq=f},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=o(r(7)),s=o(r(4));function o(t){return t&&t.__esModule?t:{default:t}}var a=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._load=[e.debounce(r,5)],this._textures={},this._pending={},this._n=0}return i(t,[{key:"get",value:function(t,e,r,i){var n=this,o=this._pending[e],a=this._textures[e];return o?o.push(r):a?r&&r():(o=this._pending[e]=[r],this._n++,this._textures[e]=a=s.default.createTexture(t,e,function(){o.forEach(function(t){return t&&t()}),delete n._pending[e],--n._n||n._load.forEach(function(t){return t()})},i)),a}},{key:"onLoad",value:function(t){this.allLoaded()?t():this._load.push(t)}},{key:"allLoaded",value:function(){return n.default.emptyObject(this._pending)}}]),t}();e.default=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=s(r(7));s(r(4));function s(t){return t&&t.__esModule?t:{default:t}}var o=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._load=[e.debounce(r||function(){},5)],this._files={},this._pending={},this._n=0}return i(t,[{key:"_transformFile",value:function(t,e){return"json"===e?JSON.parse(t):t}},{key:"get",value:function(t){return this._files[t]}},{key:"load",value:function(t,e,r){var i=this,s=this._pending[t],o=this._files[t];return s?s.push(e):o?e&&e():(s=this._pending[t]=[e],this._n++,n.default.ajax(t,function(e){i._files[t]=i._transformFile(e,r),s.forEach(function(e){return e&&e(i._files[t])}),delete i._pending[t],--i._n||i._load.forEach(function(t){return t()})},"arraybuffer"==r?r:void 0)),o}},{key:"onLoad",value:function(t){this.allLoaded()?t():this._load.push(t)}},{key:"allLoaded",value:function(){return n.default.emptyObject(this._pending)}}]),t}();e.default=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=a(r(35)),s=a(r(36)),o=a(r(7));function a(t){return t&&t.__esModule?t:{default:t}}var u=function(){function t(e,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._gl=e,this._modules={default:new n.default(e,r,i),sdf:new s.default(e,r,i)}}return i(t,[{key:"clear",value:function(){for(var t in this._modules)this._modules[t].clear()}},{key:"isSDF",value:function(t){return!(!o.default.isObject(t)||"sdf"!==t.type||!t.pbf)}},{key:"getEngine",value:function(t){return this.isSDF(t)?this._modules.sdf:this._modules.default}},{key:"bind",value:function(){for(var t in this._modules)this._modules[t].bind()}},{key:"remove",value:function(){for(var t in this._modules)this._modules[t].remove&&this._modules[t].remove()}}]),t}();e.default=u},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(e,r,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._gl=e,this._size=1024,this._canvas=document.createElement("canvas"),this._canvas.width=this._canvas.height=this._size,this._canvas.style.width=this._canvas.style.height=this._size+"px",this._canvas.style.display="none",this._el=document.body.appendChild(this._canvas),this._context=this._canvas.getContext("2d"),this._context.fillStyle="white",this._context.textAlign="left",this._context.textBaseline="top",this._rendered=this._texts=this._x=this._y=this._height=void 0,this.texture=this._gl.createTexture()}return r(t,[{key:"clear",value:function(){this._rendered={},this._context.clearRect(0,0,this._size,this._size),this._height=this._x=this._y=0}},{key:"setFont",value:function(t){var e=t?t.size+"px "+t.type:void 0;this._rendered[e]=this._texts=this._rendered[e]||{},this._context.font=e,this._x=0,this._y+=this._height,this._height=t?t.size+1:NaN}},{key:"getTexture",value:function(t,e){return e(),this.texture}},{key:"_getText",value:function(t){var e=this._texts[t];if(!e){var r=this._context.measureText(t).width;this._x+r>this._size&&(this._x=0,this._y+=this._height),this._context.fillText(t,this._x,this._y),this._texts[t]=e={width:r,height:this._height,left:this._x/this._size,right:(this._x+r)/this._size,top:this._y/this._size,bottom:(this._y+this._height)/this._size},this._x+=r}return e}},{key:"get",value:function(t,e,r){var i=this._getText(t),n=e<=.5?0:-i.width,s=r<=.5?0:-i.height;return[{width:i.width,height:i.height,left:i.left,right:i.right,top:i.top,bottom:i.bottom,dx:n,dy:s}]}},{key:"steps",value:function(t){return 1}},{key:"bind",value:function(){this._gl.bindTexture(this._gl.TEXTURE_2D,this.texture),this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL,!1),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MAG_FILTER,this._gl.NEAREST),this._gl.texParameteri(this._gl.TEXTURE_2D,this._gl.TEXTURE_MIN_FILTER,this._gl.NEAREST),this._gl.texImage2D(this._gl.TEXTURE_2D,0,this._gl.RGBA,this._gl.RGBA,this._gl.UNSIGNED_BYTE,this._canvas),this._gl.bindTexture(this._gl.TEXTURE_2D,null)}},{key:"remove",value:function(){this._context&&this._el.parentNode.removeChild(this._el)}},{key:"fontSize",get:function(){return this._height-1}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),n=a(r(37)),s=a(r(39)),o=a(r(41));function a(t){return t&&t.__esModule?t:{default:t}}function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var h=function t(e,r,i){u(this,t);this.advance=e.advance,this.left=e.left-i-1,this.top=e.top+i+1,this.rect=r},c=512,f=function(){function t(e,r,i){var n=this;u(this,t),this.width=c,this.height=c,this.clear(),this._files=r,this._rendered={},this._texts,this._gl=e,this.atlas=new s.default(this._gl,function(){n._cachedGlyphs={}}),this._textures={},this._glyphs={},this._rects={},this._cachedGlyphs={}}return i(t,[{key:"clear",value:function(){}},{key:"setFont",value:function(t){this.curFont=t.pbf}},{key:"getTexture",value:function(t,e){var r,i=this,s=arguments,a=(r=e,function(){i._files.load(t.pbf,e,"arraybuffer");for(var n=0;n<128;n++)i._getChar(String.fromCharCode(n));r&&r.apply(i,s)}),u=t.pbf;if(this._glyphs[u])a();else{var h=this._files.load(t.pbf,a,"arraybuffer");this._curglyphs=this._glyphs[u]=h&&new o.default(new n.default(h))}return this.atlas.texture}},{key:"_getChar",value:function(t,e){var r=this.curFont,i=t.charCodeAt(0),n=Math.floor(i/256);if(this._glyphs[r]){var s=this._glyphs[r];if(s){var o=s.stacks[n];if(o){var a=o.glyphs[i];this._rects[r]||(this._rects[r]={}),this._rects[r][t]=this.atlas.addGlyph(i,this.curFont,a,3,e)}}}var u,c=void 0;if((u=this._rects[r])&&(c=u[t])){var f=this._cachedGlyphs[r]||(this._cachedGlyphs[r]={});return f[i]||(f[i]=new h(this._glyphs[r].stacks[n].glyphs[i],c,3))}return{}}},{key:"get",value:function(t,e,r,i){for(var n=0,s=0,o=0;o<t.length;o++){var a=this._getChar(t[o],i),u=a.rect||{};s=Math.max(s,u.h-a.top),n+=a.advance+3}for(var h=e<=.5?0:-n,c=r<=.5?0:-s,f=[],l=0;l<t.length;l++){var d=this._getChar(t[l],i),v=d.rect||{};h+=3,f.push({width:v.w,height:v.h,left:v.x/this.atlas.width,right:(v.x+v.w)/this.atlas.width,bottom:(v.y+v.h)/this.atlas.height,top:v.y/this.atlas.height,dx:h,dy:c+d.top+(s-v.h)}),h+=d.advance}return f}},{key:"steps",value:function(t){return t.length}},{key:"bind",value:function(){this.atlas.updateTexture(this._gl)}},{key:"isSDF",get:function(){return!0}},{key:"fontSize",get:function(){return 24}}]),t}();e.default=f},function(t,e,r){"use strict";t.exports=n;var i=r(38);function n(t){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(t)?t:new Uint8Array(t||0),this.pos=0,this.type=0,this.length=this.buf.length}n.Varint=0,n.Fixed64=1,n.Bytes=2,n.Fixed32=5;function s(t){return t.type===n.Bytes?t.readVarint()+t.pos:t.pos+1}function o(t,e,r){return r?4294967296*e+(t>>>0):4294967296*(e>>>0)+(t>>>0)}function a(t,e,r){var i=e<=16383?1:e<=2097151?2:e<=268435455?3:Math.ceil(Math.log(e)/(7*Math.LN2));r.realloc(i);for(var n=r.pos-1;n>=t;n--)r.buf[n+i]=r.buf[n]}function u(t,e){for(var r=0;r<t.length;r++)e.writeVarint(t[r])}function h(t,e){for(var r=0;r<t.length;r++)e.writeSVarint(t[r])}function c(t,e){for(var r=0;r<t.length;r++)e.writeFloat(t[r])}function f(t,e){for(var r=0;r<t.length;r++)e.writeDouble(t[r])}function l(t,e){for(var r=0;r<t.length;r++)e.writeBoolean(t[r])}function d(t,e){for(var r=0;r<t.length;r++)e.writeFixed32(t[r])}function v(t,e){for(var r=0;r<t.length;r++)e.writeSFixed32(t[r])}function g(t,e){for(var r=0;r<t.length;r++)e.writeFixed64(t[r])}function p(t,e){for(var r=0;r<t.length;r++)e.writeSFixed64(t[r])}function m(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+16777216*t[e+3]}function y(t,e,r){t[r]=e,t[r+1]=e>>>8,t[r+2]=e>>>16,t[r+3]=e>>>24}function w(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+(t[e+3]<<24)}n.prototype={destroy:function(){this.buf=null},readFields:function(t,e,r){for(r=r||this.length;this.pos<r;){var i=this.readVarint(),n=i>>3,s=this.pos;this.type=7&i,t(n,e,this),this.pos===s&&this.skip(i)}return e},readMessage:function(t,e){return this.readFields(t,e,this.readVarint()+this.pos)},readFixed32:function(){var t=m(this.buf,this.pos);return this.pos+=4,t},readSFixed32:function(){var t=w(this.buf,this.pos);return this.pos+=4,t},readFixed64:function(){var t=m(this.buf,this.pos)+4294967296*m(this.buf,this.pos+4);return this.pos+=8,t},readSFixed64:function(){var t=m(this.buf,this.pos)+4294967296*w(this.buf,this.pos+4);return this.pos+=8,t},readFloat:function(){var t=i.read(this.buf,this.pos,!0,23,4);return this.pos+=4,t},readDouble:function(){var t=i.read(this.buf,this.pos,!0,52,8);return this.pos+=8,t},readVarint:function(t){var e,r,i=this.buf;return e=127&(r=i[this.pos++]),r<128?e:(e|=(127&(r=i[this.pos++]))<<7,r<128?e:(e|=(127&(r=i[this.pos++]))<<14,r<128?e:(e|=(127&(r=i[this.pos++]))<<21,r<128?e:function(t,e,r){var i,n,s=r.buf;if(n=s[r.pos++],i=(112&n)>>4,n<128)return o(t,i,e);if(n=s[r.pos++],i|=(127&n)<<3,n<128)return o(t,i,e);if(n=s[r.pos++],i|=(127&n)<<10,n<128)return o(t,i,e);if(n=s[r.pos++],i|=(127&n)<<17,n<128)return o(t,i,e);if(n=s[r.pos++],i|=(127&n)<<24,n<128)return o(t,i,e);if(n=s[r.pos++],i|=(1&n)<<31,n<128)return o(t,i,e);throw new Error("Expected varint not more than 10 bytes")}(e|=(15&(r=i[this.pos]))<<28,t,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var t=this.readVarint();return t%2==1?(t+1)/-2:t/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var t=this.readVarint()+this.pos,e=function(t,e,r){var i="",n=e;for(;n<r;){var s,o,a,u=t[n],h=null,c=u>239?4:u>223?3:u>191?2:1;if(n+c>r)break;1===c?u<128&&(h=u):2===c?128==(192&(s=t[n+1]))&&(h=(31&u)<<6|63&s)<=127&&(h=null):3===c?(s=t[n+1],o=t[n+2],128==(192&s)&&128==(192&o)&&((h=(15&u)<<12|(63&s)<<6|63&o)<=2047||h>=55296&&h<=57343)&&(h=null)):4===c&&(s=t[n+1],o=t[n+2],a=t[n+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&((h=(15&u)<<18|(63&s)<<12|(63&o)<<6|63&a)<=65535||h>=1114112)&&(h=null)),null===h?(h=65533,c=1):h>65535&&(h-=65536,i+=String.fromCharCode(h>>>10&1023|55296),h=56320|1023&h),i+=String.fromCharCode(h),n+=c}return i}(this.buf,this.pos,t);return this.pos=t,e},readBytes:function(){var t=this.readVarint()+this.pos,e=this.buf.subarray(this.pos,t);return this.pos=t,e},readPackedVarint:function(t,e){var r=s(this);for(t=t||[];this.pos<r;)t.push(this.readVarint(e));return t},readPackedSVarint:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readSVarint());return t},readPackedBoolean:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readBoolean());return t},readPackedFloat:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readFloat());return t},readPackedDouble:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readDouble());return t},readPackedFixed32:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readFixed32());return t},readPackedSFixed32:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed32());return t},readPackedFixed64:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readFixed64());return t},readPackedSFixed64:function(t){var e=s(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed64());return t},skip:function(t){var e=7&t;if(e===n.Varint)for(;this.buf[this.pos++]>127;);else if(e===n.Bytes)this.pos=this.readVarint()+this.pos;else if(e===n.Fixed32)this.pos+=4;else{if(e!==n.Fixed64)throw new Error("Unimplemented type: "+e);this.pos+=8}},writeTag:function(t,e){this.writeVarint(t<<3|e)},realloc:function(t){for(var e=this.length||16;e<this.pos+t;)e*=2;if(e!==this.length){var r=new Uint8Array(e);r.set(this.buf),this.buf=r,this.length=e}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(t){this.realloc(4),y(this.buf,t,this.pos),this.pos+=4},writeSFixed32:function(t){this.realloc(4),y(this.buf,t,this.pos),this.pos+=4},writeFixed64:function(t){this.realloc(8),y(this.buf,-1&t,this.pos),y(this.buf,Math.floor(t*(1/4294967296)),this.pos+4),this.pos+=8},writeSFixed64:function(t){this.realloc(8),y(this.buf,-1&t,this.pos),y(this.buf,Math.floor(t*(1/4294967296)),this.pos+4),this.pos+=8},writeVarint:function(t){(t=+t||0)>268435455||t<0?function(t,e){var r,i;t>=0?(r=t%4294967296|0,i=t/4294967296|0):(i=~(-t/4294967296),4294967295^(r=~(-t%4294967296))?r=r+1|0:(r=0,i=i+1|0));if(t>=0x10000000000000000||t<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");e.realloc(10),function(t,e,r){r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos++]=127&t|128,t>>>=7,r.buf[r.pos]=127&t}(r,0,e),function(t,e){var r=(7&t)<<4;if(e.buf[e.pos++]|=r|((t>>>=3)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;if(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),!t)return;e.buf[e.pos++]=127&t}(i,e)}(t,this):(this.realloc(4),this.buf[this.pos++]=127&t|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=t>>>7&127))))},writeSVarint:function(t){this.writeVarint(t<0?2*-t-1:2*t)},writeBoolean:function(t){this.writeVarint(Boolean(t))},writeString:function(t){t=String(t),this.realloc(4*t.length),this.pos++;var e=this.pos;this.pos=function(t,e,r){for(var i,n,s=0;s<e.length;s++){if((i=e.charCodeAt(s))>55295&&i<57344){if(!n){i>56319||s+1===e.length?(t[r++]=239,t[r++]=191,t[r++]=189):n=i;continue}if(i<56320){t[r++]=239,t[r++]=191,t[r++]=189,n=i;continue}i=n-55296<<10|i-56320|65536,n=null}else n&&(t[r++]=239,t[r++]=191,t[r++]=189,n=null);i<128?t[r++]=i:(i<2048?t[r++]=i>>6|192:(i<65536?t[r++]=i>>12|224:(t[r++]=i>>18|240,t[r++]=i>>12&63|128),t[r++]=i>>6&63|128),t[r++]=63&i|128)}return r}(this.buf,t,this.pos);var r=this.pos-e;r>=128&&a(e,r,this),this.pos=e-1,this.writeVarint(r),this.pos+=r},writeFloat:function(t){this.realloc(4),i.write(this.buf,t,this.pos,!0,23,4),this.pos+=4},writeDouble:function(t){this.realloc(8),i.write(this.buf,t,this.pos,!0,52,8),this.pos+=8},writeBytes:function(t){var e=t.length;this.writeVarint(e),this.realloc(e);for(var r=0;r<e;r++)this.buf[this.pos++]=t[r]},writeRawMessage:function(t,e){this.pos++;var r=this.pos;t(e,this);var i=this.pos-r;i>=128&&a(r,i,this),this.pos=r-1,this.writeVarint(i),this.pos+=i},writeMessage:function(t,e,r){this.writeTag(t,n.Bytes),this.writeRawMessage(e,r)},writePackedVarint:function(t,e){this.writeMessage(t,u,e)},writePackedSVarint:function(t,e){this.writeMessage(t,h,e)},writePackedBoolean:function(t,e){this.writeMessage(t,l,e)},writePackedFloat:function(t,e){this.writeMessage(t,c,e)},writePackedDouble:function(t,e){this.writeMessage(t,f,e)},writePackedFixed32:function(t,e){this.writeMessage(t,d,e)},writePackedSFixed32:function(t,e){this.writeMessage(t,v,e)},writePackedFixed64:function(t,e){this.writeMessage(t,g,e)},writePackedSFixed64:function(t,e){this.writeMessage(t,p,e)},writeBytesField:function(t,e){this.writeTag(t,n.Bytes),this.writeBytes(e)},writeFixed32Field:function(t,e){this.writeTag(t,n.Fixed32),this.writeFixed32(e)},writeSFixed32Field:function(t,e){this.writeTag(t,n.Fixed32),this.writeSFixed32(e)},writeFixed64Field:function(t,e){this.writeTag(t,n.Fixed64),this.writeFixed64(e)},writeSFixed64Field:function(t,e){this.writeTag(t,n.Fixed64),this.writeSFixed64(e)},writeVarintField:function(t,e){this.writeTag(t,n.Varint),this.writeVarint(e)},writeSVarintField:function(t,e){this.writeTag(t,n.Varint),this.writeSVarint(e)},writeStringField:function(t,e){this.writeTag(t,n.Bytes),this.writeString(e)},writeFloatField:function(t,e){this.writeTag(t,n.Fixed32),this.writeFloat(e)},writeDoubleField:function(t,e){this.writeTag(t,n.Fixed64),this.writeDouble(e)},writeBooleanField:function(t,e){this.writeVarintField(t,Boolean(e))}}},function(t,e){e.read=function(t,e,r,i,n){var s,o,a=8*n-i-1,u=(1<<a)-1,h=u>>1,c=-7,f=r?n-1:0,l=r?-1:1,d=t[e+f];for(f+=l,s=d&(1<<-c)-1,d>>=-c,c+=a;c>0;s=256*s+t[e+f],f+=l,c-=8);for(o=s&(1<<-c)-1,s>>=-c,c+=i;c>0;o=256*o+t[e+f],f+=l,c-=8);if(0===s)s=1-h;else{if(s===u)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,i),s-=h}return(d?-1:1)*o*Math.pow(2,s-i)},e.write=function(t,e,r,i,n,s){var o,a,u,h=8*s-n-1,c=(1<<h)-1,f=c>>1,l=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:s-1,v=i?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-o))<1&&(o--,u*=2),(e+=o+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(o++,u/=2),o+f>=c?(a=0,o=c):o+f>=1?(a=(e*u-1)*Math.pow(2,n),o+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,n),o=0));n>=8;t[r+d]=255&a,d+=v,a/=256,n-=8);for(o=o<<n|a,h+=n;h>0;t[r+d]=255&o,d+=v,o/=256,h-=8);t[r+d-v]|=128*g}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,n=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),s=r(40),o=(i=s)&&i.__esModule?i:{default:i};var a=1024,u=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.width=a,this.height=a,this._resetCache=r,this.bin=new o.default(this.width,this.height),this.index={},this.ids={},this.gl=e,this.data=new Uint8Array(this.width*this.height)}return n(t,[{key:"_createTexture",value:function(){this.dirty=!1;var t=this.gl,e=t.createTexture();return t.bindTexture(t.TEXTURE_2D,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texImage2D(t.TEXTURE_2D,0,t.ALPHA,this.width,this.height,0,t.ALPHA,t.UNSIGNED_BYTE,this.data),t.bindTexture(t.TEXTURE_2D,null),e}},{key:"getGlyphs",value:function(){var t={},e=void 0,r=void 0,i=void 0;for(var n in this.ids)r=(e=n.split("#"))[0],i=e[1],t[r]||(t[r]=[]),t[r].push(i);return t}},{key:"getRects",value:function(){var t={},e=void 0,r=void 0,i=void 0;for(var n in this.ids)r=(e=n.split("#"))[0],i=e[1],t[r]||(t[r]={}),t[r][i]=this.index[n];return t}},{key:"addGlyph",value:function(t,e,r,i,n){if(!r)return null;var s=e+"#"+r.id;if(this.index[s])return this.ids[s].indexOf(t)<0&&this.ids[s].push(t),this.index[s];var o=r.width+2*i,a=r.height+2*i,u=o+2,h=a+2;u+=4-u%4,h+=4-h%4;var c=this.bin.packOne(u,h);if(c||(this.resize(),c=this.bin.packOne(u,h),n&&n()),!c)return null;if(this.index[s]=c,this.ids[s]=[t],r.bitmap)for(var f=this.data,l=r.bitmap,d=0;d<a;d++)for(var v=this.width*(c.y+d+1)+c.x+1,g=o*d,p=0;p<o;p++)f[v+p]=l[g+p];return this.dirty=!0,c}},{key:"resize",value:function(){var t=this.width,e=this.height;if(!(t>=2048||e>=2048)){this._texture&&(this.gl&&this.gl.deleteTexture(this._texture),this._texture=null),this.width*=4,this.height*=4,this.bin.resize(this.width,this.height);for(var r=new ArrayBuffer(this.width*this.height),i=0;i<e;i++){var n=new Uint8Array(this.data.buffer,e*i,t);new Uint8Array(r,e*i*4,t).set(n)}this.data=new Uint8Array(r),this._resetCache()}}},{key:"bind",value:function(t){}},{key:"updateTexture",value:function(){var t=this.gl;return this._texture||(this._texture=this._createTexture()),this.dirty&&(t.bindTexture(t.TEXTURE_2D,this._texture),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!1),t.texSubImage2D(t.TEXTURE_2D,0,0,0,this.width,this.height,t.ALPHA,t.UNSIGNED_BYTE,this.data),t.bindTexture(t.TEXTURE_2D,null),this.dirty=!1),this._texture}},{key:"texture",get:function(){return this._texture}}]),t}();e.default=u},function(t,e,r){t.exports=function(){function t(t,e,r){r=r||{},this.w=t||64,this.h=e||64,this.autoResize=!!r.autoResize,this.shelves=[],this.freebins=[],this.stats={},this.bins={},this.maxId=0}function e(t,e,r){this.x=0,this.y=t,this.w=this.free=e,this.h=r}function r(t,e,r,i,n){this.id=t,this.x=e,this.y=r,this.w=i,this.h=n,this.maxw=i,this.maxh=n,this.refcount=0}return t.prototype.pack=function(t,e){t=[].concat(t),e=e||{};for(var r,i,n,s,o=[],a=0;a<t.length;a++)if(r=t[a].w||t[a].width,i=t[a].h||t[a].height,n=t[a].id,r&&i){if(!(s=this.packOne(r,i,n)))continue;e.inPlace&&(t[a].x=s.x,t[a].y=s.y,t[a].id=s.id),o.push(s)}if(this.shelves.length>0){for(var u=0,h=0,c=0;c<this.shelves.length;c++){var f=this.shelves[c];h+=f.h,u=Math.max(f.w-f.free,u)}this.resize(u,h)}return o},t.prototype.packOne=function(t,r,i){var n,s,o,a,u,h,c,f,l={freebin:-1,shelf:-1,waste:1/0},d=0;if("string"==typeof i||"number"==typeof i){if(n=this.getBin(i))return this.ref(n),n;"number"==typeof i&&(this.maxId=Math.max(i,this.maxId))}else i=++this.maxId;for(a=0;a<this.freebins.length;a++){if(r===(n=this.freebins[a]).maxh&&t===n.maxw)return this.allocFreebin(a,t,r,i);r>n.maxh||t>n.maxw||r<=n.maxh&&t<=n.maxw&&(o=n.maxw*n.maxh-t*r)<l.waste&&(l.waste=o,l.freebin=a)}for(a=0;a<this.shelves.length;a++)if(d+=(s=this.shelves[a]).h,!(t>s.free)){if(r===s.h)return this.allocShelf(a,t,r,i);r>s.h||r<s.h&&(o=(s.h-r)*t)<l.waste&&(l.freebin=-1,l.waste=o,l.shelf=a)}return-1!==l.freebin?this.allocFreebin(l.freebin,t,r,i):-1!==l.shelf?this.allocShelf(l.shelf,t,r,i):r<=this.h-d&&t<=this.w?(s=new e(d,this.w,r),this.allocShelf(this.shelves.push(s)-1,t,r,i)):this.autoResize?(u=h=this.h,((c=f=this.w)<=u||t>c)&&(f=2*Math.max(t,c)),(u<c||r>u)&&(h=2*Math.max(r,u)),this.resize(f,h),this.packOne(t,r,i)):null},t.prototype.allocFreebin=function(t,e,r,i){var n=this.freebins.splice(t,1)[0];return n.id=i,n.w=e,n.h=r,n.refcount=0,this.bins[i]=n,this.ref(n),n},t.prototype.allocShelf=function(t,e,r,i){var n=this.shelves[t].alloc(e,r,i);return this.bins[i]=n,this.ref(n),n},t.prototype.getBin=function(t){return this.bins[t]},t.prototype.ref=function(t){if(1==++t.refcount){var e=t.h;this.stats[e]=1+(0|this.stats[e])}return t.refcount},t.prototype.unref=function(t){return 0===t.refcount?0:(0==--t.refcount&&(this.stats[t.h]--,delete this.bins[t.id],this.freebins.push(t)),t.refcount)},t.prototype.clear=function(){this.shelves=[],this.freebins=[],this.stats={},this.bins={},this.maxId=0},t.prototype.resize=function(t,e){this.w=t,this.h=e;for(var r=0;r<this.shelves.length;r++)this.shelves[r].resize(t);return!0},e.prototype.alloc=function(t,e,i){if(t>this.free||e>this.h)return null;var n=this.x;return this.x+=t,this.free-=t,new r(i,n,this.y,t,e)},e.prototype.resize=function(t){return this.free+=t-this.w,this.w=t,!0},t}()},function(t,e){"use strict";function r(t,e,r){if(1===t){var n=r.readMessage(i,{glyphs:{}});e.push(n)}}function i(t,e,r){if(1===t)e.name=r.readString();else if(2===t)e.range=r.readString();else if(3===t){var i=r.readMessage(n,{});e.glyphs[i.id]=i}}function n(t,e,r){1===t?e.id=r.readVarint():2===t?e.bitmap=r.readBytes():3===t?e.width=r.readVarint():4===t?e.height=r.readVarint():5===t?e.left=r.readSVarint():6===t?e.top=r.readSVarint():7===t&&(e.advance=r.readVarint())}Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t,e){this.stacks=t.readFields(r,[],e)}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._enable=!0}return r(t,[{key:"debounce",value:function(t,e,r){var i=this,n=arguments,s=void 0,o=void 0,a=void 0,u=void 0,h=void 0,c=function n(){var c=Date.now-u;c<e&&c>0?s=setTimeout(n,e-c):(s=null,r||(i._enable&&(h=t.apply(a,o)),s||(a=o=null)))};return function(){a=i,o=n,u=Date.now;var f=r&&!s;return s||(s=setTimeout(c,e)),f&&(i._enable&&(h=t.apply(a,o)),a=o=null),h}}},{key:"disable",value:function(){this._enable=!1}}]),t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,n=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),s=r(28),o=(i=s)&&i.__esModule?i:{default:i};function a(t,e){t.indexOf(e)>=0||t.push(e)}var u=function(){function t(e,r,i,n,s,a){var u=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._layers=e,this._insertTempLayer=r,this._draw=i,this._nodes=n,this._edges=s,this._checkUniqId=a,this._toAddEdges=[],this._toAddNodes=[],this._toRemoveEdges=[],this._toRemoveNodes=[],this._nPos={},this._ePos={},this._eDirs={},n.forEach(function(t,e){u._nPos[t.uniqid]=e,u._eDirs[t.uniqid]={}}),s.forEach(function(t,e){var r=o.default.edgeSource(t),i=o.default.edgeTarget(t),n=r.uniqid||r.__uniqid,s=i.uniqid||i.__uniqid;(u._eDirs[n]||(u._eDirs[n]={}))[s]=t,u._ePos[t.uniqid]=e}),this._actualTempNodes=[],this._actualTempEdges=[]}return n(t,[{key:"_doRemoveNodes",value:function(t){var e=this;t.forEach(function(t){if(void 0!==t.uniqid){if(void 0!==e._nPos[t.uniqid]){var r=e._nPos[t.uniqid];e._layers.main.removeNodeAtPos(r),delete e._nPos[t.uniqid]}else for(var i=0;i<e._actualTempNodes.length;i++)if(e._actualTempNodes[i]===t){e._actualTempNodes.splice(i,1);break}t.__uniqid=t.uniqid,delete t.uniqid}})}},{key:"_doRemoveEdges",value:function(t){var e=this;t.forEach(function(t){if(void 0!==t.uniqid){var r=o.default.edgeSource(t),i=o.default.edgeTarget(t);if(delete(e._eDirs[r.uniqid||r.__uniqid]||{})[i.uniqid||i.__uniqid],void 0!==e._ePos[t.uniqid]){var n=e._ePos[t.uniqid];e._layers.main.removeEdgeAtPos(n),delete e._ePos[t.uniqid]}else for(var s=0;s<e._actualTempEdges.length;s++)if(e._actualTempEdges[s]===t){e._actualTempEdges.splice(s,1);break}t.__uniqid=t.uniqid,delete t.uniqid}})}},{key:"_doAddEdges",value:function(){var t=this;this._toAddEdges.forEach(function(e){if(void 0!==t._ePos[e.uniqid]&&t._doRemoveEdges([e]),void 0!==e.uniqid)return console.error(e),void console.error("This edge has been already added, if you want to add same edge twice, create new object with same properties");t._checkUniqId(e),a(t._actualTempEdges,e)})}},{key:"_doAddNodes",value:function(t){var e=this;this._toAddNodes.forEach(function(t){if(void 0!==e._nPos[t.uniqid]&&e._doRemoveNodes([t]),void 0!==t.uniqid)return console.error(t),void console.error("This node has been already added, if you want to add same node twice, create new object with same properties");e._checkUniqId(t),e._eDirs[t.uniqid]={},a(e._actualTempNodes,t)})}},{key:"addEdge",value:function(t){var e=o.default.edgeSource(t),r=o.default.edgeTarget(t),i=r.uniqid||r.__uniqid,n=e.uniqid||e.__uniqid;return(this._eDirs[n]||{})[i]&&this._doRemoveEdges([t]),(this._eDirs[i]||{})[n]?(this._toAddEdges.push(this._eDirs[i][n]),this._doRemoveEdges([this._eDirs[i][n]]),this._toAddEdges.push(this._eDirs[n][i]=t),this):(this._toAddEdges.push(t),this)}},{key:"addNode",value:function(t){return this._toAddNodes.push(t),this}},{key:"removeNode",value:function(t){return this._toRemoveNodes.push(t),this}},{key:"removeEdge",value:function(t){return this._toRemoveEdges.push(t),this}},{key:"applyChanges",value:function(){return 0===this._toRemoveEdges.length&&0===this._toRemoveNodes.length&&0===this._toAddEdges.length&&0===this._toAddNodes.length?this:(this._actualTempNodes=this._layers.temp?this._layers.temp.nodes:[],this._actualTempEdges=this._layers.temp?this._layers.temp.edges:[],this._doRemoveEdges(this._toRemoveEdges),this._doRemoveNodes(this._toRemoveNodes),this._doAddNodes(),this._doAddEdges(),this._toAddEdges=[],this._toAddNodes=[],this._toRemoveEdges=[],this._toRemoveNodes=[],this._insertTempLayer(),this._layers.temp.set(this._actualTempNodes,this._actualTempEdges),this._draw(),this)}}]),t}();e.default=u}]),t.exports=ccNetViz}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,